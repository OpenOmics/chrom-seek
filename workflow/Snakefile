# Python standard library
import datetime
import json
from itertools import combinations
from os.path import join
from os import listdir

# Local imports
from scripts.common import provided
from scripts.grouping import group_samples_by_reps, \
    group_output_files, get_peaktools


configfile: "config.json"


# Global workflow variables
today                           = str(datetime.datetime.today()).split()[0].replace('-', '') # YYYYMMDD
samples                         = config['samples']
bin_path                        = config['project']['binpath']
workpath                        = config['project']['workpath']
assay                           = config['options']['assay']
blocks                          = config['project']['blocks']
blocking                        = False if set(blocks.values()) in ({None}, {''}) else True
paired_end                      = False if config['project']['nends'] == 1 else True
chips                           = config['project']['peaks']['chips']
contrast                        = config['project']['contrast']

# list of contrasts in {group1}_vs_{group2}
contrasts                       = []
for group_list in contrast:
    for combo in combinations(group_list, 2):
        contrasts.append(f"{combo[0]}_vs_{combo[1]}")

chip2input                      = config['project']['peaks']['inputs']
has_inputs                      = False if set(chip2input.values()) in ({''}, {None}) else True
groupdata                       = config['project']['groups']
peak_types                      = config['options']['peak_type_base']
rule_all_ins                    = []
groupdatawinput, groupswreps    = group_samples_by_reps(groupdata, samples, chip2input)
PeakTools                       = get_peaktools(assay)
groups                          = list(groupdatawinput.keys())
reps                            = True if len(groupswreps) > 0 else False
uniq_inputs                     = list(sorted(set([v for v in chip2input.values() if v])))
sampleswinput                   = [
    chip_sid for chip_sid, input_sid in chip2input.items() \
    if chip_sid != 'NA' and chip_sid != ''
]
inputnorm                       = [""] if len(sampleswinput) == 0 else ["", ".inputnorm"]
UropaCats                       = ["protTSS", "prot", "protSEC", "genes"]

# Directory end points
bam_dir                         = join(workpath, "bam")
bw_dir                          = join(workpath, "bigwig")
qc_dir                          = join(workpath, "QC")
ppqt_dir                        = join(bam_dir, "ppqt")
macsN_dir                       = join(workpath, "macsNarrow")
macsB_dir                       = join(workpath, "macsBroad")
sicer_dir                       = join(workpath, "sicer")
peakqc_dir                      = join(workpath, "PeakQC")
uropa_dir                       = join(workpath, "UROPA_annotations")
uropa_diffbind_dir              = join(uropa_dir, "DiffBind")
uropa_diffbind_join_dir         = join(workpath, "UROPA_DIFFBIND_TBLS")
diffbind_dir                    = join(workpath, "DiffBind")
diffbind_qc_dir                 = join(peakqc_dir, "DB_QC")
cfTool_dir                      = join(workpath, "cfChIPtool")
genrich_dir                     = join(workpath, "Genrich")
MEME_dir                        = join(workpath, "MEME")
manorm_dir                      = join(workpath, "MANorm")
seacr_dir                       = join(workpath, "SEACR")
homer_dir                       = join(workpath, "HOMER")


# Read in resource information
with open(join('config', 'cluster.json')) as fh:
    cluster = json.load(fh)

if assay == "cfchip":
    rule_all_ins.append(join(
        qc_dir, "H3K4me3_cfChIP_signature.txt"
    ))
    rule_all_ins.extend(expand(
        join(qc_dir, "{name}.sorted.insert_size_metrics.txt"), 
        name=samples,
    ))
    rule_all_ins.extend(expand(
        join(qc_dir, "{name}.Q5DD.insert_size_metrics.txt"), 
        name=samples,
    ))
    rule_all_ins.extend(expand(
        join(cfTool_dir, "Output", "H3K4me3", "Signatures", "{name}.Q5DD.csv"), 
        name=chips
    ))
else:
    if paired_end:
        rule_all_ins.extend(expand(join(qc_dir, "{name}.sorted.insert_size_metrics.txt"), name=samples))
        rule_all_ins.extend(expand(join(qc_dir, "{name}.Q5DD.insert_size_metrics.txt"), name=samples))
    if assay in ("atac", "chip"):
        rule_all_ins.extend(expand(
            join(homer_dir, "UP_{contrast}_{PeakTool}_{differential_app}", "homer.out"),
            contrast=contrasts,
            PeakTool=PeakTools,
            differential_app=["DeSeq2", "EdgeR"],
        ))
    # macsNarrow
    rule_all_ins.extend(expand(join(macsN_dir, "{name}", "{name}_peaks.narrowPeak"), name=chips))
    rule_all_ins.append(join(peakqc_dir, "jaccard", 'macsNarrow_jaccard.txt'))
    if assay == "chip":
        # macsBroad
        rule_all_ins.extend(expand(join(macsB_dir, "{name}", "{name}_peaks.broadPeak"), name=chips))
        rule_all_ins.append(join(peakqc_dir, "jaccard", 'macsBroad_jaccard.txt'))
        rule_all_ins.extend(expand(
            join(uropa_dir, "{application}", "{name}_uropa_{_type}_allhits.txt"), 
            name=chips,
            application=["macsBroad"],
            _type=peak_types,
        ))
    if assay in ("chip", "cutnrun"):
        # SEACR
        rule_all_ins.append(join(peakqc_dir, "jaccard", 'SEACR_jaccard.txt'))
        rule_all_ins.extend(expand(
            join(seacr_dir, "{name}", "{name}.stringent.bed"), name=chips
        ))
    if assay in ("atac", "chip"):
        # Genrich
        rule_all_ins.append(join(peakqc_dir, "jaccard", "Genrich_jaccard.txt"))
        rule_all_ins.extend(expand(
            join(genrich_dir, "{name}", "{name}.narrowPeak"), name=chips
        ))

# meme outputs turned off for now
# if has_inputs:
#     rule_all_ins.extend(expand(join(MEME_dir, "{PeakTool}", "{name}_meme", "meme-chip.html"), PeakTool=PeakTools, name=chips))
#     rule_all_ins.extend(expand(join(MEME_dir, "{PeakTool}", "{name}_ame", "ame.html"), PeakTool=PeakTools, name=chips))

rule_all_ins.append(expand(
    join(diffbind_qc_dir, "AllSamples-{pktool}", "AllSamples-{pktool}_DiffBindQC.html"),
    pktool=PeakTools
))
rule_all_ins.append(expand(
    join(diffbind_qc_dir, "AllSamples-{pktool}", "AllSamples-{pktool}_DiffBindQC_TMMcounts.bed"),
    pktool=PeakTools
))
rule_all_ins.append(expand(
    join(diffbind_qc_dir, "AllSamples-{pktool}", "AllSamples-{pktool}_DiffBind_prep.csv"),
    pktool=PeakTools
))
rule_all_ins.append(join(workpath, "multiqc_report.html"))
rule_all_ins.extend(expand(join(qc_dir, "{name}.preseq.dat"), name=samples))
rule_all_ins.extend(
    expand(join(peakqc_dir, "FRiP", "{PeakTool}", "{PeakTool}.{name}.Q5DD.FRiP_table.txt"), 
    PeakTool=PeakTools, 
    name=chips)
)
rule_all_ins.extend(expand(
    join(bam_dir, "{name}.sorted.bam"), 
    name=samples
))
rule_all_ins.extend(expand(
    join(bw_dir, "{name}.sorted.RPGC.bw"), 
    name=samples,
))
rule_all_ins.extend(expand(
    join(bw_dir, "{name}.Q5DD.RPGC.bw"), 
    name=samples
))

if has_inputs:
    rule_all_ins.extend(expand(join(bw_dir, "{name}.Q5DD.RPGC.inputnorm.bw"), name=sampleswinput))

rule_all_ins.extend(expand(
    join(uropa_dir, "{application}", "{name}_uropa_{_type}_allhits.txt"), 
    name=chips,
    application=["macsNarrow"],
    _type=peak_types,
))
rule_all_ins.extend(expand(
    join(uropa_diffbind_join_dir, "{contrast}-{PeakTool}-{differential_app}_{_type}_UROPA_DIFFBIND_JOIN.txt"),
    differential_app=["DeSeq2", "EdgeR"],
    contrast=contrasts,
    _type=peak_types,
    PeakTool=PeakTools
))

if paired_end:
    rule_all_ins.extend(expand(
        join(qc_dir, "{name}.nrf"), 
        name=chips,
    ))

if reps and contrast:
    rule_all_ins.extend(expand(
        join(diffbind_dir, "{contrast}-{PeakTool}", "{contrast}-{PeakTool}_Diffbind_EdgeR.html"), 
        contrast=contrasts, PeakTool=PeakTools
    ))
    rule_all_ins.extend(expand(
        join(diffbind_dir, "{contrast}-{PeakTool}", "{contrast}-{PeakTool}_Diffbind_DeSeq2.html"), 
        contrast=contrasts, PeakTool=PeakTools
    ))
    rule_all_ins.extend(expand(
        join(uropa_dir, "DiffBind", "{contrast}-{PeakTool}-{differential_app}", "{contrast}_{PeakTool}_{differential_app}_{_type}_uropa_allhits.txt"), 
        contrast=contrasts, PeakTool=PeakTools, differential_app=['EdgeR'], _type=peak_types
    )),
    if blocking:
        rule_all_ins.extend(expand(
            join(diffbind_dir, "{contrast}-{PeakTool}", "{contrast}-{PeakTool}_Diffbind_block_EdgeR.html"),
            contrast=contrasts, PeakTool=PeakTools
        ))
        rule_all_ins.extend(expand(
            join(diffbind_dir, "{contrast}-{PeakTool}", "{contrast}-{PeakTool}_Diffbind_block_DeSeq2.html"),
            contrast=contrasts, PeakTool=PeakTools
        ))

rule all:
    input:
        rule_all_ins

# Include endedness rules
if paired_end:
    if assay == 'cfchip':
        include: join("rules", "cfChIP.smk")
    include: join("rules", "paired", "peakcall.smk")
    include: join("rules", "paired", "qc.smk")
    include: join("rules", "paired", "trim_align_dedup.smk")
else:
    include: join("rules", "single", "peakcall.smk")
    include: join("rules", "single", "qc.smk")
    include: join("rules", "single", "trim_align_dedup.smk")


# Include general rules
include: join("rules", "hooks.smk")
include: join("rules", "qc.smk")
include: join("rules", "peak_utils.smk")
include: join("rules", "dba.smk")
include: join("rules", "uropa.smk")
