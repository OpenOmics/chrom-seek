# Python standard library
import datetime
import json
from itertools import combinations
from os.path import join
from os import listdir

# Local imports
from scripts.common import provided, get_file_components
from scripts.grouping import group_samples_by_reps, \
    group_output_files, get_peaktools


configfile: "config.json"


# Global workflow variables
today                           = str(datetime.datetime.today()).split()[0].replace('-', '') # YYYYMMDD
samples                         = config['samples']
bin_path                        = config['project']['binpath']
workpath                        = config['project']['workpath']
assay                           = config['options']['assay']
blocks                          = config['project']['blocks']
blocking                        = False if set(blocks.values()) in ({None}, {''}) else True
paired_end                      = False if config['project']['nends'] == 1 else True
chips                           = config['project']['peaks']['chips']
contrast                        = config['project']['contrast']

# list of contrasts in {group1}_vs_{group2}
contrasts                       = []
for group_list in contrast:
    for combo in combinations(group_list, 2):
        contrasts.append(f"{combo[0]}_vs_{combo[1]}")

chip2input                      = config['project']['peaks']['inputs']
has_inputs                      = False if set(chip2input.values()) in ({''}, {None}) else True
groupdata                       = config['project']['groups']
peak_types                      = config['options']['peak_type_base']
rule_all_ins                    = []
groupdatawinput, groupswreps    = group_samples_by_reps(groupdata, samples, chip2input)
PeakTools                       = get_peaktools(assay)
file_stems, extRPGC, extaln     = get_file_components(paired_end)
groups                          = list(groupdatawinput.keys())
reps                            = True if len(groupswreps) > 0 else False
uniq_inputs                     = list(sorted(set([v for v in chip2input.values() if v])))
sampleswinput                   = [
    chip_value for chip_value, input_id in chip2input.items() \
    if chip_value != 'NA' and chip_value != ''
]
inputnorm                       = [""] if len(sampleswinput) == 0 else ["", ".inputnorm"]
deepgroups, deepexts            = group_output_files(extRPGC, groups, inputnorm)
UropaCats                       = ["protTSS", "prot", "protSEC", "genes"]

# Directory end points
bam_dir                         = join(workpath, "bam")
bw_dir                          = join(workpath, "bigwig")
qc_dir                          = join(workpath, "QC")
ppqt_dir                        = join(bam_dir, "ppqt")
macsN_dir                       = join(workpath, "macsNarrow")
macsB_dir                       = join(workpath, "macsBroad")
sicer_dir                       = join(workpath, "sicer")
peakqc_dir                      = join(workpath, "PeakQC")
uropa_dir                       = join(workpath, "UROPA_annotations")
uropa_diffbind_dir              = join(uropa_dir, "DiffBind")
diffbind_dir                    = join(workpath, "DiffBind")
cfTool_dir                      = join(workpath, "cfChIPtool")
genrich_dir                     = join(workpath, "Genrich")
MEME_dir                        = join(workpath, "MEME")
manorm_dir                      = join(workpath, "MANorm")
dba_anno_path                   = join(workpath, 'dba_annotations')


# Read in resource information
with open(join('config', 'cluster.json')) as fh:
    cluster = json.load(fh)

if assay == "cfchip":
    rule_all_ins.append(join(
        qc_dir, "H3K4me3_cfChIP_signature.txt"
    ))
    rule_all_ins.extend(expand(
        join(qc_dir, "{name}.{stem}.insert_size_metrics.txt"), 
        name=samples, 
        stem=file_stems
    ))
    rule_all_ins.extend(expand(
        join(cfTool_dir, "Output", "H3K4me3", "Signatures", "{name}.Q5DD.csv"), 
        name=chips
    ))
    if has_inputs:
        rule_all_ins.append(
            join(qc_dir, "AllSamples-macsNarrow", "AllSamples-macsNarrow_DiffBindQC_TMMcounts.bed")
        )
    if reps:
        # promotertable 1
        # rule_all_ins.extend(expand(
        #     join(uropa_dir, "promoterTable1", "{PeakTool}_promoter_overlap_summaryTable.txt"), 
        #     PeakTool=['macsNarrow']
        # ))
        if contrast:
            # promotertable 2
            # rule_all_ins.append(expand(
            #     join(uropa_dir, "promoterTable2", '{contrast}-{PeakTool}_DiffbindDeseq2_promoter_overlap_summaryTable.txt'),
            #     contrast=contrasts, PeakTool=PeakTools
            # ))
            # rule_all_ins.append(expand(
            #     join(uropa_diffbind_dir, "{contrast}-{PeakTool}-{diff_app}", '{contrast}-{PeakTool}_Diffbind_{diff_app}_promoter_overlap_summaryTable.txt'),
            #     contrast=contrasts, PeakTool=PeakTools, diff_app=['DeSeq2']
            # ))
            pass
    else:
        # remove manorm for now
        # rule_all_ins.extend(expand(
        #     join(uropa_dir, '{PeakTool}', '{name}_{PeakTool}_uropa_{_type}_allhits.txt'), 
        #     PeakTool="MANorm", 
        #     name=contrasts, 
        #     _type=UropaCats
        # ))
        # rule_all_ins.extend(expand(
        #     join(manorm_dir, "{group1}_vs_{group2}-{tool}", "{group1}_vs_{group2}-{tool}_all_MAvalues.xls"), 
        #     group1=zipGroup1, 
        #     group2=zipGroup2, 
        #     tool=zipToolC
        # ))
        pass # remove this when manorm is added back
elif assay in ["atac", "chip"]:
    # turn off other peak types for now
    # peak_types.extend(["prot", "protSEC", "genes"])
    # peak_types = list(set(peak_types))
    # meme outputs turned off for now
    # if has_inputs:
    #     rule_all_ins.extend(expand(join(MEME_dir, "{PeakTool}", "{name}_meme", "meme-chip.html"), PeakTool=PeakTools, name=chips))
    #     rule_all_ins.extend(expand(join(MEME_dir, "{PeakTool}", "{name}_ame", "ame.html"), PeakTool=PeakTools, name=chips))
    if paired_end:
        rule_all_ins.extend(expand(join(qc_dir, "{name}.{stem}.insert_size_metrics.txt"), name=samples, stem=file_stems))
    if assay == "chip":
        rule_all_ins.extend(expand(join(macsB_dir, "{name}", "{name}_peaks.broadPeak"), name=chips))
        # sicer outputs turned off for now
        # if has_inputs:
        #     rule_all_ins.extend(expand(join(sicer_dir, "{name}", "{name}_broadpeaks.bed"), name=chips))
        short_ext, tag_ext = ["sorted", "Q5DD"], ["sorted", "Q5DD_tagAlign"]
        if paired_end:
            rule_all_ins.extend(expand(join(ppqt_dir, "{name}.{ext}.ppqt"), name=samples, ext=short_ext))
            rule_all_ins.extend(expand(join(ppqt_dir, "{name}.{ext}.pdf"), name=samples, ext=short_ext))
            rule_all_ins.extend(expand(join(ppqt_dir, "{name}.{ext}.ppqt.txt"), name=samples, ext=short_ext))
        else:
            rule_all_ins.extend(expand(join(ppqt_dir, "{name}.{ext}.ppqt"), name=samples, ext=tag_ext))
            rule_all_ins.extend(expand(join(ppqt_dir, "{name}.{ext}.pdf"), name=samples, ext=tag_ext))
            rule_all_ins.extend(expand(join(ppqt_dir, "{name}.{ext}.ppqt.txt"), name=samples, ext=tag_ext))
    elif assay == "atac":
        rule_all_ins.extend(expand(
            join(genrich_dir, "{name}", "{name}.narrowPeak"), name=chips
        ))
    else:
        pass
        # manorm turned off now
        # rule_all_ins.extend(expand(
        #     join(uropa_dir, '{PeakTool}', '{name}_{PeakTool}_uropa_{_type}_allhits.txt'), 
        #     PeakTool="MANorm", 
        #     name=contrasts, 
        #     _type=UropaCats
        # ))
        # rule_all_ins.extend(expand(
        #     join(manorm_dir, "{group1}_vs_{group2}-{tool}", "{group1}_vs_{group2}-{tool}_all_MAvalues.xls"), 
        #     group1=zipGroup1, 
        #     group2=zipGroup2, 
        #     tool=zipToolC
        # ))
rule_all_ins.append(join(workpath, "multiqc_report.html"))
rule_all_ins.extend(expand(join(qc_dir, "{name}.preseq.dat"), name=samples))
rule_all_ins.extend(
    expand(join(peakqc_dir, "{PeakTool}", "{PeakTool}.{name}.Q5DD.FRiP_table.txt"), PeakTool=PeakTools, name=chips)
)
rule_all_ins.extend(expand(join(bam_dir, "{name}.{ext}"), name=samples, ext=extaln))
rule_all_ins.extend(expand(join(bw_dir, "{name}.{ext}.RPGC.bw"), name=samples, ext=["sorted", "Q5DD"]))

if has_inputs:
    rule_all_ins.extend(expand(join(bw_dir, "{name}.Q5DD.RPGC.inputnorm.bw"), name=sampleswinput))

rule_all_ins.extend(expand(
    join(uropa_dir, "{application}", "{name}_uropa_{_type}_allhits.txt"), 
    name=chips,
    application=["macsNarrow", "macsBroad"],
    _type=peak_types,
))

if reps and contrast:
    rule_all_ins.extend(expand(
        join(diffbind_dir, "{contrast}-{PeakTool}", "{contrast}-{PeakTool}_Diffbind_EdgeR.html"), 
        contrast=contrasts, PeakTool=PeakTools
    ))
    rule_all_ins.extend(expand(
        join(diffbind_dir, "{contrast}-{PeakTool}", "{contrast}-{PeakTool}_Diffbind_DeSeq2.html"), 
        contrast=contrasts, PeakTool=PeakTools
    ))
    rule_all_ins.extend(expand(
        join(uropa_dir, "DiffBind", "{contrast}-{PeakTool}-{differential_app}", "{contrast}_{PeakTool}_{differential_app}_{_type}_uropa_allhits.txt"), 
        contrast=contrasts, PeakTool=PeakTools, differential_app=['EdgeR'], _type=peak_types
    )),
    rule_all_ins.extend(expand(
        join(dba_anno_path, "{contrast}_{PeakTool}_{_type}_uropa_allhits.txt"), 
        contrast=contrasts, PeakTool=PeakTools, _type=peak_types
    )),
    if blocking:
        rule_all_ins.extend(expand(
            join(diffbind_dir, "{contrast}-{PeakTool}", "{contrast}-{PeakTool}_Diffbind_blocking_EdgeR.html"),
            contrast=contrasts, PeakTool=PeakTools
        ))
        rule_all_ins.extend(expand(
            join(diffbind_dir, "{contrast}-{PeakTool}", "{contrast}-{PeakTool}_Diffbind_blocking_DeSeq2.html"),
            contrast=contrasts, PeakTool=PeakTools
        ))

rule all:
    input:
        rule_all_ins

# Include child rules
include: join("rules", "hooks.smk")
include: join("rules", "trim_align_dedup.smk")
include: join("rules", "qc.smk")
include: join("rules", "peakcall.smk")
include: join("rules", "dba.smk")
include: join("rules", "uropa.smk")
include: join("rules", "cfChIP.smk")