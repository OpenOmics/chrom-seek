{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"chrom-seek \ud83d\udd2c An awesome set of epigenetic pipelines This is the home of the pipeline, chrom-seek. Its long-term goals: to accurately call and annotate peaks, to infer cell types in cell-free samples, and to boldly quantify diferential binding or accessibility like no pipeline before! Overview \u00b6 Welcome to chrom-seek's documentation! This guide is the main source of documentation for users who are getting started with our bulk epigenetic pipelines . The ./chrom-seek pipeline is composed of several interrelated sub-commands to set up and run the pipeline across different systems. Each of the available sub-commands performs different functions: chrom-seek run Run the chrom-seek pipeline with your input files. chrom-seek unlock Unlocks a previous runs output directory. chrom-seek install Download remote reference files locally. chrom-seek cache Cache remote software containers locally. chrom-seek is an awesome set of pipelines designed specifically for cell-free ChIP-seq, bulk ChIP-seq, and bulk ATAC-seq sequencing data. It relies on technologies like Singularity 1 to maintain the highest level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 2 , a flexible and scalable workflow management system, to submit jobs to a cluster. The pipeline is compatible with data generated from Illumina short-read sequencing technologies. As input, it accepts a set of FastQ files and can be run locally on a compute instance or on-premise using a cluster. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM (more coming soon!). A hybrid approach ensures the pipeline is accessible to all users. Before getting started, we highly recommend reading through the usage section of each available sub-command. For more information about issues or troubleshooting a problem, please check out our FAQ prior to opening an issue on Github . Contribute \u00b6 This site is a living document, created for and by members like you. chrom-seek is maintained by the members of NCBR and is improved by continuous feedback! We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository . Citation \u00b6 If you use this software, please cite it as below: BibTex APA @article {Jange202302003, author = {Moon Kyoo Jang and Tovah E Markowitz and Temesgen E Andargie and Zainab Apalara and Skyler Kuhn and Sean Agbor-Enoh}, title = {Cell-free chromatin immunoprecipitation to detect molecular pathways in heart transplantation}, volume = {6}, number = {12}, elocation-id = {e202302003}, year = {2023}, doi = {10.26508/lsa.202302003}, publisher = {Life Science Alliance}, abstract = {Existing monitoring approaches in heart transplantation lack the sensitivity to provide deep molecular assessments to guide management, or require endomyocardial biopsy, an invasive and blind procedure that lacks the precision to reliably obtain biopsy samples from diseased sites. This study examined plasma cell-free DNA chromatin immunoprecipitation sequencing (cfChIP-seq) as a noninvasive proxy to define molecular gene sets and sources of tissue injury in heart transplant patients. In healthy controls and in heart transplant patients, cfChIP-seq reliably detected housekeeping genes. cfChIP-seq identified differential gene signals of relevant immune and nonimmune molecular pathways that were predominantly down-regulated in immunosuppressed heart transplant patients compared with healthy controls. cfChIP-seq also identified cell-free DNA tissue sources. Compared with healthy controls, heart transplant patients demonstrated greater cell-free DNA from tissue types associated with heart transplant complications, including the heart, hematopoietic cells, lungs, liver, and vascular endothelium. cfChIP-seq may therefore be a reliable approach to profile dynamic assessments of molecular pathways and sources of tissue injury in heart transplant patients.}, URL = {https://www.life-science-alliance.org/content/6/12/e202302003}, eprint = {https://www.life-science-alliance.org/content/6/12/e202302003.full.pdf}, journal = {Life Science Alliance} } Jang, M. K., Markowitz, T. E., Andargie, T. E., Apalara, Z., Kuhn, S., & Agbor-Enoh, S. (2023). Cell-free chromatin immunoprecipitation to detect molecular pathways in heart transplantation. Life Science Alliance, 6(12), e202302003. https://doi.org/10.26508/lsa.202302003 References \u00b6 1. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 2. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600.","title":"About"},{"location":"#overview","text":"Welcome to chrom-seek's documentation! This guide is the main source of documentation for users who are getting started with our bulk epigenetic pipelines . The ./chrom-seek pipeline is composed of several interrelated sub-commands to set up and run the pipeline across different systems. Each of the available sub-commands performs different functions: chrom-seek run Run the chrom-seek pipeline with your input files. chrom-seek unlock Unlocks a previous runs output directory. chrom-seek install Download remote reference files locally. chrom-seek cache Cache remote software containers locally. chrom-seek is an awesome set of pipelines designed specifically for cell-free ChIP-seq, bulk ChIP-seq, and bulk ATAC-seq sequencing data. It relies on technologies like Singularity 1 to maintain the highest level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 2 , a flexible and scalable workflow management system, to submit jobs to a cluster. The pipeline is compatible with data generated from Illumina short-read sequencing technologies. As input, it accepts a set of FastQ files and can be run locally on a compute instance or on-premise using a cluster. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM (more coming soon!). A hybrid approach ensures the pipeline is accessible to all users. Before getting started, we highly recommend reading through the usage section of each available sub-command. For more information about issues or troubleshooting a problem, please check out our FAQ prior to opening an issue on Github .","title":"Overview"},{"location":"#contribute","text":"This site is a living document, created for and by members like you. chrom-seek is maintained by the members of NCBR and is improved by continuous feedback! We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository .","title":"Contribute"},{"location":"#citation","text":"If you use this software, please cite it as below: BibTex APA @article {Jange202302003, author = {Moon Kyoo Jang and Tovah E Markowitz and Temesgen E Andargie and Zainab Apalara and Skyler Kuhn and Sean Agbor-Enoh}, title = {Cell-free chromatin immunoprecipitation to detect molecular pathways in heart transplantation}, volume = {6}, number = {12}, elocation-id = {e202302003}, year = {2023}, doi = {10.26508/lsa.202302003}, publisher = {Life Science Alliance}, abstract = {Existing monitoring approaches in heart transplantation lack the sensitivity to provide deep molecular assessments to guide management, or require endomyocardial biopsy, an invasive and blind procedure that lacks the precision to reliably obtain biopsy samples from diseased sites. This study examined plasma cell-free DNA chromatin immunoprecipitation sequencing (cfChIP-seq) as a noninvasive proxy to define molecular gene sets and sources of tissue injury in heart transplant patients. In healthy controls and in heart transplant patients, cfChIP-seq reliably detected housekeeping genes. cfChIP-seq identified differential gene signals of relevant immune and nonimmune molecular pathways that were predominantly down-regulated in immunosuppressed heart transplant patients compared with healthy controls. cfChIP-seq also identified cell-free DNA tissue sources. Compared with healthy controls, heart transplant patients demonstrated greater cell-free DNA from tissue types associated with heart transplant complications, including the heart, hematopoietic cells, lungs, liver, and vascular endothelium. cfChIP-seq may therefore be a reliable approach to profile dynamic assessments of molecular pathways and sources of tissue injury in heart transplant patients.}, URL = {https://www.life-science-alliance.org/content/6/12/e202302003}, eprint = {https://www.life-science-alliance.org/content/6/12/e202302003.full.pdf}, journal = {Life Science Alliance} } Jang, M. K., Markowitz, T. E., Andargie, T. E., Apalara, Z., Kuhn, S., & Agbor-Enoh, S. (2023). Cell-free chromatin immunoprecipitation to detect molecular pathways in heart transplantation. Life Science Alliance, 6(12), e202302003. https://doi.org/10.26508/lsa.202302003","title":"Citation"},{"location":"#references","text":"1. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 2. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600.","title":"References"},{"location":"Useful_review_articles/","text":"Useful Review Articles \u00b6 Jordan-Pla, A. and V. Neus (2017). Considerations on Experimental Design and Data Analysis of Chomatin Immunoprecitation Experiments. https://link.springer.com/protocol/10.1007/978-1-4939-7380-4_2 Wet bench guidelines and experimental design details. Basics of ChIP-seq analysis. Northrup, D.L. and K. Zhao (2011). Application of ChIP-seq and Related Techniques to the Study of Immune Function. https://www.sciencedirect.com/science/article/pii/S1074761311002317 Some useful information about the different kinds of histone modifications and their functions, especially in the context of the immune system. Park, P.J. ChIP-seq: advantages and challenges of a maturing technology. https://www.nature.com/articles/nrg2641 An old paper that really goes into the molecular biology that is ChIP-seq and connects it to how the bioinformatics needs to be accomplished to account for it Minnow, L. et al. (2021). Chromatin accessibility profiling methods. https://www.nature.com/articles/s43586-020-00008-9 . Basic descriptions of a variety of accessibility methods, especially ChIP-seq, ATAC-seq, scATAC-seq. Also mentions CUT & RUN, etc. Article also includes a brief section on bioinformatics analysis tools available at the time of publication and some example applications. Liu, H. et al. (2024): Best practices for the ATAC-seq assay and its data analysis. https://www.sciencedirect.com/science/article/pii/B9780128172186000164 Detailed, thorough description of best practices for both the wet bench and the computational aspects of ATAC-seq","title":"Useful reviews"},{"location":"Useful_review_articles/#useful-review-articles","text":"Jordan-Pla, A. and V. Neus (2017). Considerations on Experimental Design and Data Analysis of Chomatin Immunoprecitation Experiments. https://link.springer.com/protocol/10.1007/978-1-4939-7380-4_2 Wet bench guidelines and experimental design details. Basics of ChIP-seq analysis. Northrup, D.L. and K. Zhao (2011). Application of ChIP-seq and Related Techniques to the Study of Immune Function. https://www.sciencedirect.com/science/article/pii/S1074761311002317 Some useful information about the different kinds of histone modifications and their functions, especially in the context of the immune system. Park, P.J. ChIP-seq: advantages and challenges of a maturing technology. https://www.nature.com/articles/nrg2641 An old paper that really goes into the molecular biology that is ChIP-seq and connects it to how the bioinformatics needs to be accomplished to account for it Minnow, L. et al. (2021). Chromatin accessibility profiling methods. https://www.nature.com/articles/s43586-020-00008-9 . Basic descriptions of a variety of accessibility methods, especially ChIP-seq, ATAC-seq, scATAC-seq. Also mentions CUT & RUN, etc. Article also includes a brief section on bioinformatics analysis tools available at the time of publication and some example applications. Liu, H. et al. (2024): Best practices for the ATAC-seq assay and its data analysis. https://www.sciencedirect.com/science/article/pii/B9780128172186000164 Detailed, thorough description of best practices for both the wet bench and the computational aspects of ATAC-seq","title":"Useful Review Articles"},{"location":"best_practices/","text":"Best practices \u00b6 Our take-home message \u00b6 Always remember to consider the specific immunoprecipation or methodology for each analysis. Bigwigs serve as our closest approximation to truth sets. It's essential to cross-check results against them. The boundaries of peaks are primarily influenced by the tool used for analysis rather than being inherent biological features. This type of data often contains significant noise and a high background level. The majority of reads are not detected within peaks. Among the remaining reads, some may represent background artifacts, while others have biological significance. However, distinguishing between the two is challenging. Additionally, the proportion of reads within peaks is influenced by biological factors. Key points to consider \u00b6 Not all ChIP-seq data can be treated equally! Here are some main classes of proteins to consider when analyzing ChIP-seq data: Transcription factors Promoter-associated histones Enhancer-associated histones Repressive histones RNA Polymerase II Repressive histone marks Chromosome structure proteins DNA damage proteins Transcription factors are often regarded as the most straightforward targets in ChIP-seq experiments due to their high abundance, strong binding affinity, and well-characterized binding motifs. They typically exhibit clear and distinct peaks in ChIP-seq data, facilitating their detection and analysis. Moreover, transcription factors are known for their resilience to variations in processing and analysis protocols compared to other genomic features. They also demonstrate reduced dependence on ideal experimental controls. Additionally, transcription factors are frequently associated with established gold standards, which aid in sensitivity and specificity assessments in ChIP-seq assays. Their specific binding to DNA sequences further simplifies validation in laboratory experiments. Databases like ENCODE and Cistrome are valuable resources for studying specific marks. These databases employ robust data processing methods, although the sensitivity and specificity of processed features may be relatively lower compared to other methods. Some features may be poorly identified, particularly in a subset of cases. High noise and background levels affect all these methods, influenced by both biological factors and sample processing. Considering this influence is crucial at every stage of experimental design and data processing. ATAC-seq presents two primary challenges. Firstly, it explores two types of open chromatin regions, each characterized by distinct patterns and functions. These regions encompass histones flanked by spaces, typically found within active genes, and larger open regions devoid of stable histones, such as promoters. Secondly, ATAC-seq lacks a comprehensive global truth set for validation. Consequently, there is a scarcity of literature on best practices for ATAC-seq, with methodologies often relying on knowledge from similar methods. When annotating peaks, it's essential to remember: A single peak may influence multiple genes. Unless it occurs within a gene's promoter or within 1kb of a transcriptional start site, determining if the nearest gene is actually affected by the peak is challenging without additional information. Activating transcription factors within gene bodies are unlikely to affect that gene directly. Peak boundaries are arbitrary. While summits are likely binding sites for transcription factors, they may not hold true for other features. Recommendations \u00b6 General considerations \u00b6 Using QC metrics as the sole criterion for sample quality assessment is unreliable. While QC values may be informative for certain features or laboratories, they do not universally apply. While they provide a starting point, they should not be used as an automatic decision-making tool for sample exclusion! Normalized counts matrices and derived results should not be solely relied upon, as they depend on the quality of peak calls, consensus peak identification, and normalization methods used. It's crucial to confirm the validity of results using normalized bigwigs or directly generated plots. Bigwigs offer enhanced visibility as they have been processed relative to the bam files in several ways: Normalization to library size, utilizing only useful reads. Position adjustment as needed, particularly significant for single-end ChIP. Normalization against input to mitigate one form of biological noise, if available. 75 bp smoothing, aligning with the resolution of most methods (50-250bp). Peak calling \u00b6 Here's a structured approach for choosing a peak caller that is most suitable for your data. Remember to consider the specific immunoprecipation or methodology for each analysis. The following guidelines are based on the most common types of data, but they may not be applicable to all scenarios. Always consult the literature, consider the specific characteristics of your data, and visually inspect the peak calls along with their relevent tracks before making a descision. Transcription Factor (TF) Analysis Inspect the macsNarrow calls in IGV. If macsNarrow calls appear satisfactory, use macsNarrow. If not, consider using macsBroad. ATAC-seq Analysis Determine if publication status matters. If publication status matters, utilize macsNarrow. If not, compare results from macsNarrow and Genrich to determine the better option. CUN & RUN or CUT & TAG Analysis Compare results from macsNarrow and SEACR to determine the better option. Narrow Histone Mark Analysis Uncertain about whether the data represents a narrow histone mark? Consult the ENCODE documentation . Compare results from macsNarrow and macsBroad. If one outperforms the other consistently, choose the better option. If not, either option is viable. Other Marks Analysis Check the macsBroad calls. If they appear suitable, use macsBroad. If macsBroad calls don't meet expectations, assess the pipeline default sicer calls in the chrome-seek pipeline. If sicer calls are acceptable, utilize those. If not, adjust sicer conditions as necessary, noting that peak calling may not be feasible for all marks. Differential analyses \u00b6 Establishing a robust method for identifying consensus peaks is essential. To effectively utilize any differential analysis tool, it's imperative to have a shared set of peaks across all samples. This step facilitates the removal of peaks with low counts, so avoid filtering outside of this process. Keep in mind that peak calling introduces noise, and peak boundaries lack biological significance. Additionally, be aware that peaks in one sample may overlap with multiple peaks in another sample. Normalization plays a crucial role in differential peak calling. Numerous studies indicate that both the consensus peak list and normalization method significantly impact results. However, determining the optimal approach can be challenging. A consistent finding in the literature is that normalizing solely to reads within peaks, without external information, consistently yields subpar results. This is likely because a significant proportion of reads (60-99%) often reside outside peaks, representing biologically relevant but rarer binding sites. I prefer scaling to the number of reads aligning to the genome following deduplication. In DiffBind v2, the TMM output takes the raw counts, corrects for inputs when applicable, and employs a DESeq2 function to scale the samples to an external value (the number of reads in the bam file) rather than relying solely on the internal values in the counts table. In ChIP-seq and ATAC-seq analyses, simpler models tend to yield better results. This is likely due to the various sources of noise in the data, including biological, technical, and computational factors. It's essential to scrutinize results from any method used to ensure that background noise isn't being erroneously identified. In the majority of projects, skews in global fold-changes towards one condition or the other are likely to be biologically meaningful. It's essential not to artificially equalize the number of peaks on both sides of the contrast unless there's prior knowledge or a substantial difference in the size of the original libraries (exceeding 10X). It's not uncommon to observe small differential fold-changes, even among the most significant peaks. Many papers assessing differential peak calls, as well as the default conditions in tools like DiffBind, often do not include fold-change filtering. However, in my experience, it can be advantageous to incorporate a low fold-change cutoff. A reasonable starting point is an absolute fold-change cutoff of 1.5 (equivalent to a log2 value of 0.585). Alternatively, using a cutoff of 4 (log2 value of 2) will typically remove almost all peaks unless the analysis is focused on transcription factors. Please note: The pipeline opts to use a depreciated version of DiffBind for several reasons. This is by design! Here is why: DiffBind v2 has consistently demonstrated superior performance compared to other differential peak callers across a wide range of features documented in the literature. DiffBind v3 lacks rigorous testing, and the author does not provide rationale for changes in default counting or normalization parameters. It is feasible to achieve results similar to DiffBind v2, especially for ATAC data or in cases lacking input samples, by configuring the pipeline correctly. However, it consistently treats input samples differently regardless of configuration. The tool automatically generates a set of consensus peaks by combining peaks identified in at least two samples, regardless of condition, allowing for partial overlap. This results in each contrast having a unique set of comparison peaks, but it enhances the accuracy of differential peak calling. However, adjustments may be necessary for large cohorts with numerous samples. In DiffBind v2, the default normalization method scales the entire library to all reads in the alignment files. This approach is generally considered one of the most effective normalization options available. Useful links \u00b6 Here are a set of useful links for learning more about ChIP-seq and ATAC-seq. ENCODE standards and recommendations \u00b6 Transcription factors Histone marks ATAC-seq NF-core output file list with useful documentation about QC metrics we use in chrom-seek \u00b6 Cut & run ChIP-seq ATAC-seq","title":"Best Practices"},{"location":"best_practices/#best-practices","text":"","title":"Best practices"},{"location":"best_practices/#our-take-home-message","text":"Always remember to consider the specific immunoprecipation or methodology for each analysis. Bigwigs serve as our closest approximation to truth sets. It's essential to cross-check results against them. The boundaries of peaks are primarily influenced by the tool used for analysis rather than being inherent biological features. This type of data often contains significant noise and a high background level. The majority of reads are not detected within peaks. Among the remaining reads, some may represent background artifacts, while others have biological significance. However, distinguishing between the two is challenging. Additionally, the proportion of reads within peaks is influenced by biological factors.","title":"Our take-home message"},{"location":"best_practices/#key-points-to-consider","text":"Not all ChIP-seq data can be treated equally! Here are some main classes of proteins to consider when analyzing ChIP-seq data: Transcription factors Promoter-associated histones Enhancer-associated histones Repressive histones RNA Polymerase II Repressive histone marks Chromosome structure proteins DNA damage proteins Transcription factors are often regarded as the most straightforward targets in ChIP-seq experiments due to their high abundance, strong binding affinity, and well-characterized binding motifs. They typically exhibit clear and distinct peaks in ChIP-seq data, facilitating their detection and analysis. Moreover, transcription factors are known for their resilience to variations in processing and analysis protocols compared to other genomic features. They also demonstrate reduced dependence on ideal experimental controls. Additionally, transcription factors are frequently associated with established gold standards, which aid in sensitivity and specificity assessments in ChIP-seq assays. Their specific binding to DNA sequences further simplifies validation in laboratory experiments. Databases like ENCODE and Cistrome are valuable resources for studying specific marks. These databases employ robust data processing methods, although the sensitivity and specificity of processed features may be relatively lower compared to other methods. Some features may be poorly identified, particularly in a subset of cases. High noise and background levels affect all these methods, influenced by both biological factors and sample processing. Considering this influence is crucial at every stage of experimental design and data processing. ATAC-seq presents two primary challenges. Firstly, it explores two types of open chromatin regions, each characterized by distinct patterns and functions. These regions encompass histones flanked by spaces, typically found within active genes, and larger open regions devoid of stable histones, such as promoters. Secondly, ATAC-seq lacks a comprehensive global truth set for validation. Consequently, there is a scarcity of literature on best practices for ATAC-seq, with methodologies often relying on knowledge from similar methods. When annotating peaks, it's essential to remember: A single peak may influence multiple genes. Unless it occurs within a gene's promoter or within 1kb of a transcriptional start site, determining if the nearest gene is actually affected by the peak is challenging without additional information. Activating transcription factors within gene bodies are unlikely to affect that gene directly. Peak boundaries are arbitrary. While summits are likely binding sites for transcription factors, they may not hold true for other features.","title":"Key points to consider"},{"location":"best_practices/#recommendations","text":"","title":"Recommendations"},{"location":"best_practices/#general-considerations","text":"Using QC metrics as the sole criterion for sample quality assessment is unreliable. While QC values may be informative for certain features or laboratories, they do not universally apply. While they provide a starting point, they should not be used as an automatic decision-making tool for sample exclusion! Normalized counts matrices and derived results should not be solely relied upon, as they depend on the quality of peak calls, consensus peak identification, and normalization methods used. It's crucial to confirm the validity of results using normalized bigwigs or directly generated plots. Bigwigs offer enhanced visibility as they have been processed relative to the bam files in several ways: Normalization to library size, utilizing only useful reads. Position adjustment as needed, particularly significant for single-end ChIP. Normalization against input to mitigate one form of biological noise, if available. 75 bp smoothing, aligning with the resolution of most methods (50-250bp).","title":"General considerations"},{"location":"best_practices/#peak-calling","text":"Here's a structured approach for choosing a peak caller that is most suitable for your data. Remember to consider the specific immunoprecipation or methodology for each analysis. The following guidelines are based on the most common types of data, but they may not be applicable to all scenarios. Always consult the literature, consider the specific characteristics of your data, and visually inspect the peak calls along with their relevent tracks before making a descision. Transcription Factor (TF) Analysis Inspect the macsNarrow calls in IGV. If macsNarrow calls appear satisfactory, use macsNarrow. If not, consider using macsBroad. ATAC-seq Analysis Determine if publication status matters. If publication status matters, utilize macsNarrow. If not, compare results from macsNarrow and Genrich to determine the better option. CUN & RUN or CUT & TAG Analysis Compare results from macsNarrow and SEACR to determine the better option. Narrow Histone Mark Analysis Uncertain about whether the data represents a narrow histone mark? Consult the ENCODE documentation . Compare results from macsNarrow and macsBroad. If one outperforms the other consistently, choose the better option. If not, either option is viable. Other Marks Analysis Check the macsBroad calls. If they appear suitable, use macsBroad. If macsBroad calls don't meet expectations, assess the pipeline default sicer calls in the chrome-seek pipeline. If sicer calls are acceptable, utilize those. If not, adjust sicer conditions as necessary, noting that peak calling may not be feasible for all marks.","title":"Peak calling"},{"location":"best_practices/#differential-analyses","text":"Establishing a robust method for identifying consensus peaks is essential. To effectively utilize any differential analysis tool, it's imperative to have a shared set of peaks across all samples. This step facilitates the removal of peaks with low counts, so avoid filtering outside of this process. Keep in mind that peak calling introduces noise, and peak boundaries lack biological significance. Additionally, be aware that peaks in one sample may overlap with multiple peaks in another sample. Normalization plays a crucial role in differential peak calling. Numerous studies indicate that both the consensus peak list and normalization method significantly impact results. However, determining the optimal approach can be challenging. A consistent finding in the literature is that normalizing solely to reads within peaks, without external information, consistently yields subpar results. This is likely because a significant proportion of reads (60-99%) often reside outside peaks, representing biologically relevant but rarer binding sites. I prefer scaling to the number of reads aligning to the genome following deduplication. In DiffBind v2, the TMM output takes the raw counts, corrects for inputs when applicable, and employs a DESeq2 function to scale the samples to an external value (the number of reads in the bam file) rather than relying solely on the internal values in the counts table. In ChIP-seq and ATAC-seq analyses, simpler models tend to yield better results. This is likely due to the various sources of noise in the data, including biological, technical, and computational factors. It's essential to scrutinize results from any method used to ensure that background noise isn't being erroneously identified. In the majority of projects, skews in global fold-changes towards one condition or the other are likely to be biologically meaningful. It's essential not to artificially equalize the number of peaks on both sides of the contrast unless there's prior knowledge or a substantial difference in the size of the original libraries (exceeding 10X). It's not uncommon to observe small differential fold-changes, even among the most significant peaks. Many papers assessing differential peak calls, as well as the default conditions in tools like DiffBind, often do not include fold-change filtering. However, in my experience, it can be advantageous to incorporate a low fold-change cutoff. A reasonable starting point is an absolute fold-change cutoff of 1.5 (equivalent to a log2 value of 0.585). Alternatively, using a cutoff of 4 (log2 value of 2) will typically remove almost all peaks unless the analysis is focused on transcription factors. Please note: The pipeline opts to use a depreciated version of DiffBind for several reasons. This is by design! Here is why: DiffBind v2 has consistently demonstrated superior performance compared to other differential peak callers across a wide range of features documented in the literature. DiffBind v3 lacks rigorous testing, and the author does not provide rationale for changes in default counting or normalization parameters. It is feasible to achieve results similar to DiffBind v2, especially for ATAC data or in cases lacking input samples, by configuring the pipeline correctly. However, it consistently treats input samples differently regardless of configuration. The tool automatically generates a set of consensus peaks by combining peaks identified in at least two samples, regardless of condition, allowing for partial overlap. This results in each contrast having a unique set of comparison peaks, but it enhances the accuracy of differential peak calling. However, adjustments may be necessary for large cohorts with numerous samples. In DiffBind v2, the default normalization method scales the entire library to all reads in the alignment files. This approach is generally considered one of the most effective normalization options available.","title":"Differential analyses"},{"location":"best_practices/#useful-links","text":"Here are a set of useful links for learning more about ChIP-seq and ATAC-seq.","title":"Useful links"},{"location":"best_practices/#encode-standards-and-recommendations","text":"Transcription factors Histone marks ATAC-seq","title":"ENCODE standards and recommendations"},{"location":"best_practices/#nf-core-output-file-list-with-useful-documentation-about-qc-metrics-we-use-in-chrom-seek","text":"Cut & run ChIP-seq ATAC-seq","title":"NF-core output file list with useful documentation about QC metrics we use in chrom-seek"},{"location":"license/","text":"MIT License \u00b6 Copyright \u00a9 2023 OpenOmics Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright \u00a9 2023 OpenOmics Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"manual_workflows/","text":"Chrom-seek Manual: DiffBind Analyses and Downstream Steps \u00b6 This guide provides step-by-step instructions for performing post-pipeline analysis workflows outside of Snakemake, using the same working directory and scripts available in the /bin directory of chrom-seek. Overview \u00b6 After running the chrom-seek pipeline, you may want to perform additional analysis steps manually, especially if you do not wish to retain the raw FASTQs and sorted BAMs. This guide covers four main stages: Creating new DiffBind CSV files Running DiffBind in QC or differential peak calling mode Annotating peaks with UROPA Merging annotations with differential peak calls Prerequisites \u00b6 Completed chrom-seek pipeline run Access to the pipeline working directory Access to the Docker/Singularity image containing DiffBind v2 Python environment (for merging results) Stage 1: Creating New DiffBind CSV Files \u00b6 Purpose \u00b6 DiffBind requires a CSV file with metadata (in a specific format), including the locations of Q5DD BAMs and peak files. Manually consolidating this information can be time-consuming and error-prone, but the chrom-seek DiffBindQC rules generate CSVs with all sample information in one place. Steps \u00b6 Retrieve the relevant CSV from <PIPELINE_OUTPUT_DIR>/PeakQC/DB_QC . Remove rows for samples that should not be included in the analysis. Update only the following three columns: CONDITION: Group information used by DiffBind to define contrasts. Note: Do not start values with numbers. TREATMENT: (Optional) Used for blocking/paired analysis when available. Note: Do not start values with numbers. REPLICATE: A simple count (1, 2, 3, \u2026) per sample. For differential analysis , sort rows so that the first group ( group1 ) appears before the second ( group2 ) for contrasts ( group1-group2 ). \u2b06 Back to top Stage 2: Running DiffBind Analysis \u00b6 Purpose \u00b6 Use the CSV created in Stage 1 and DiffBind to identify consensus peaks and normalize read counts. QC mode analysis produces a TMM-normalized counts table, suitable for use with external differential peak callers or for generating heatmaps. It also calculates PCA and UMAP coordinates. Differential peak calling analysis uses DiffBind to identify differential peaks, as done in the chrom-seek pipeline. Input Files Required \u00b6 DiffBind CSV file (from Stage 1 ) BAM (and associated BAI) files and peak files referenced in the CSV Prepare Run Conditions \u00b6 Request an interactive session (adjust resources if needed): sinteractive -N 1 -n 1 --time = 1 -12:00:00 --mem = 100G --gres = lscratch:200 --cpus-per-task = 4 Initialize the Singularity container for DiffBind v2. Note These conditions ensure lscratch remains accessible and that the Stage 1 CSV file can retain full paths without causing errors. Usage : singularity run \\ -C \\ -e \\ --env TMPDIR = /tmp,TMP = /tmp \\ -B /lscratch/ $SLURM_JOBID :/tmp,<PROJECT_WORKING_DIR>:<PROJECT_WORKING_DIR>:rw \\ docker://skchronicles/cfchip_toolkit:v0.5.0 \\ bash Example : working_dir = /data/OpenOmics/dev/datasets/outputs/test_homer singularity run \\ -C \\ -e \\ --env TMPDIR = /tmp,TMP = /tmp,working_dir = $working_dir \\ -B /lscratch/ $SLURM_JOBID :/tmp, $working_dir : $working_dir :rw \\ docker://skchronicles/cfchip_toolkit:v0.5.0 \\ bash Stage 2A: QC Mode Analysis \u00b6 Run DiffBind_v2_QC.Rmd . Notes - Rmarkdown requires full paths; otherwise it looks for <INPUT_CSV_FILE> in <WORKING_DIR>/bin . - The <PEAK_TOOL> token must be one of: macsNarrow , Genrich , macsBroad , SEACR . Usage : Rscript -e 'rmarkdown::render(\"<WORKING_DIR>/bin/DiffBind_v2_QC.Rmd\", output_file=\"<OUTPUT_HTML_FILE>\", params=list(csvfile=\"<INPUT_CSV_FILE>\", counts_bed=\"<OUTPUT_BED_FILE>\", counts_csv=\"<OUTPUT_COUNTS_CSV_FILE>\", peakcaller=\"<PEAK_TOOL>\"))' Example : Rscript -e 'rmarkdown::render(\"/data/OpenOmics/dev/datasets/outputs/test_homer/bin/DiffBind_v2_QC.Rmd\", output_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/PeakQC/DB_QC/AllSamples-macsNarrow/AllSamples-macsNarrow_DiffBindQC.html\", params=list(csvfile=\"/data/OpenOmics/dev/datasets/outputs/test_homer/PeakQC/DB_QC/AllSamples-macsNarrow/AllSamples-macsNarrow_DiffBind_prep.csv\", counts_bed=\"/data/OpenOmics/dev/datasets/outputs/test_homer/PeakQC/DB_QC/AllSamples-macsNarrow/AllSamples-macsNarrow_DiffBindQC_TMMcounts.bed\", counts_csv=\"/data/OpenOmics/dev/datasets/outputs/test_homer/PeakQC/DB_QC/AllSamples-macsNarrow/AllSamples-macsNarrow_DiffBindQC_TMMcounts.csv\", peakcaller=\"macsNarrow\"))' Stage 2B: Differential Peak Calling Analysis \u00b6 Load counts using DiffBind_v2_load.R . Note The <PEAK_TOOL> token must be one of: macsNarrow , Genrich , macsBroad , SEACR . Usage : <WORKING_DIR>/bin/DiffBind_v2_load.R \\ --csvfile <INPUT_CSV_FILE> \\ --counts <INPUT_RDS_FILE> \\ --list <OUTPUT_PEAK_BED_FILE> \\ --peakcaller <PEAK_TOOL> Example : /data/OpenOmics/dev/datasets/outputs/test_homer/bin/DiffBind_v2_load.R \\ --csvfile /data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsBroad/IFN0h_vs_IFN24h-macsBroad_Diffbind_prep.csv \\ --counts /data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsBroad/IFN0h_vs_IFN24h-macsBroad_Diffbind_counts.rds \\ --list /data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsBroad/IFN0h_vs_IFN24h-macsBroad_Diffbind_fullList.bed \\ --peakcaller macsBroad Execute differential comparisons using DiffBind v2.15.2 . 1) Choose the method: DESeq2 or edgeR . DESeq2 generally suggested. Consider EdgeR when there is large variance in library size, library size is confounding, or there are prior knowledge suggesting that there should be an equivalent number of peaks on both sides of the contrast. 2) Decide whether your design requires no blocking or blocking (paired or batch effects). 3) Select the relevant script ( <ANALYSIS_SCRIPT> ): - <WORKING_DIR>/bin/DiffBind_v2_Deseq2.Rmd - <WORKING_DIR>/bin/DiffBind_v2_Deseq2_block.Rmd - <WORKING_DIR>/bin/DiffBind_v2_EdgeR.Rmd - <WORKING_DIR>/bin/DiffBind_v2_EdgeR_block.Rmd 4) Define the group contrast from your experimental setup: \"{group1}_vs_{group2}\" \u2192 <INPUT_CONTRASTS> . 5) Render the report: > **Note** > The `<PEAK_TOOL>` token must be one of: `macsNarrow`, `Genrich`, `macsBroad`, `SEACR`. **Usage**: ```bash Rscript -e 'rmarkdown::render(\"<ANALYSIS_SCRIPT>\", output_file=\"<OUTPUT_DIFFBIND_REPORT_FILE>\", params=list(csvfile=\"<INPUT_CSV_FILE>\", peakcaller=\"<PEAK_TOOL>\", list_file=\"<OUTPUT_PEAK_BED_LIST>\", up_file=\"<OUTPUT_UP_REGULATED_FILE>\", down_file=\"<OUTPUT_DOWN_REGULATED_FILE>\", contrasts=\"<INPUT_CONTRASTS>\", counts=\"<INPUT_PEAK_COUNTS_RDS_FILE>\"))' ``` **Example**: ```bash Rscript -e 'rmarkdown::render(\"/data/OpenOmics/dev/datasets/outputs/test_homer/bin/DiffBind_v2_Deseq2.Rmd\", output_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_DeSeq2.html\", params=list(csvfile=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_prep.csv\", peakcaller=\"macsNarrow\", list_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_DeSeq2_peak_list.tab\", up_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_DeSeq2_up.bed\", down_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_DeSeq2_down.bed\", contrasts=\"IFN0h_vs_IFN24h\", counts=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_counts.rds\"))' ``` \u2b06 Back to top Stage 3: Peak Annotation with UROPA \u00b6 Purpose \u00b6 Annotate genomic peaks with gene information, regulatory elements, and genomic context using UROPA. Input Files Required \u00b6 Peak file (BED or narrowPeak format) <PEAK_FILE> GTF annotation file <GTF_FILE> UROPA configuration file <UROPA_CONFIG> The GTF file used in the pipeline can be found in config.json under [references][<SPECIES>][GTFFILE] . Steps \u00b6 Create a UROPA configuration file. The example below is what is currently used for chrom-seek when assay is not cfchip . { \"queries\" : [ { \"feature\" : [ \"gene\" ], \"filter_attribute\" : \"gene_type\" , \"attribute_values\" : [ \"protein_coding\" ], \"feature_anchor\" : [ \"start\" ], \"distance\" : [ 3000 , 1000 ], \"name\" : \"query_1\" }, { \"feature\" : [ \"gene\" ], \"filter_attribute\" : \"gene_type\" , \"attribute_values\" : [ \"protein_coding\" ], \"feature_anchor\" : [ \"start\" ], \"distance\" : [ 10000 ], \"name\" : \"query_2\" }, { \"feature\" : [ \"gene\" ], \"filter_attribute\" : \"gene_type\" , \"attribute_values\" : [ \"protein_coding\" ], \"feature_anchor\" : [ \"start\" ], \"distance\" : [ 100000 ], \"name\" : \"query_3\" } ], \"show_attributes\" : [ \"gene_id\" , \"gene_name\" , \"gene_type\" ], \"priority\" : \"True\" , \"gtf\" : \"<GTF_FILE>\" , \"bed\" : \"<PEAK_FILE>\" } Run UROPA on Biowulf (or in your container). This example uses the uropa module. We suggest 4 threads and 10G memory. Usage : module load uropa/4.0.2 uropa -i <UROPA_CONFIG> -t 4 Example : module load uropa/4.0.2 uropa -i sample_config.json -t 4 \u2b06 Back to top Stage 4: Merging Annotations with Differential Results \u00b6 Purpose \u00b6 Combine differential binding results from Stage 2 with gene annotations from Stage 3 to generate comprehensive results tables. Input Files Required \u00b6 DiffBind peak list ( <OUTPUT_PEAK_BED_LIST> ) from Stage 2 UROPA results ( <UROPA_FINAL_HITS> ) from Stage 3 Steps \u00b6 Merge differential results with annotations. Optionally filter at a stricter FDR or fold-change threshold than defaults. Set FDR to 1 for all peaks analyzed. Usage : python <WORKING_DIR>/bin/merge_diffbind_uropa.py \\ --diffbind <DIFFBIND_PEAK_LIST_FILE> \\ --uropa <UROPA_FINAL_HITS> \\ --fdr <FDR_THRESHOLD> \\ --fold <FC_THRESHOLD> \\ --output <MERGE_OUTPUT> Example : python /data/OpenOmics/dev/datasets/outputs/test_homer/bin/merge_diffbind_uropa.py \\ --uropa /data/OpenOmics/dev/datasets/outputs/test_homer/UROPA_annotations/DiffBind/IFN0h_vs_IFN24h-macsNarrow-EdgeR/IFN0h_vs_IFN24h_macsNarrow_EdgeR_protTSS_uropa_finalhits.txt \\ --diffbind /data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_EdgeR_peak_list.tab \\ --output /data/OpenOmics/dev/datasets/outputs/test_homer/UROPA_DIFFBIND_TBLS/IFN0h_vs_IFN24h-macsNarrow-EdgeR_protTSS_UROPA_DIFFBIND_JOIN.txt \\ --fdr 0 .05 \\ --fold 0 \u2b06 Back to top Getting Help \u00b6 Biowulf user guide (for sinteractive ) DiffBind v2.0.2 documentation DiffBind v1.2.4 vignette (archival) UROPA manual","title":"Manually running DiffBind"},{"location":"manual_workflows/#chrom-seek-manual-diffbind-analyses-and-downstream-steps","text":"This guide provides step-by-step instructions for performing post-pipeline analysis workflows outside of Snakemake, using the same working directory and scripts available in the /bin directory of chrom-seek.","title":"Chrom-seek Manual: DiffBind Analyses and Downstream Steps"},{"location":"manual_workflows/#overview","text":"After running the chrom-seek pipeline, you may want to perform additional analysis steps manually, especially if you do not wish to retain the raw FASTQs and sorted BAMs. This guide covers four main stages: Creating new DiffBind CSV files Running DiffBind in QC or differential peak calling mode Annotating peaks with UROPA Merging annotations with differential peak calls","title":"Overview"},{"location":"manual_workflows/#prerequisites","text":"Completed chrom-seek pipeline run Access to the pipeline working directory Access to the Docker/Singularity image containing DiffBind v2 Python environment (for merging results)","title":"Prerequisites"},{"location":"manual_workflows/#stage-1-creating-new-diffbind-csv-files","text":"","title":"Stage 1: Creating New DiffBind CSV Files"},{"location":"manual_workflows/#purpose","text":"DiffBind requires a CSV file with metadata (in a specific format), including the locations of Q5DD BAMs and peak files. Manually consolidating this information can be time-consuming and error-prone, but the chrom-seek DiffBindQC rules generate CSVs with all sample information in one place.","title":"Purpose"},{"location":"manual_workflows/#steps","text":"Retrieve the relevant CSV from <PIPELINE_OUTPUT_DIR>/PeakQC/DB_QC . Remove rows for samples that should not be included in the analysis. Update only the following three columns: CONDITION: Group information used by DiffBind to define contrasts. Note: Do not start values with numbers. TREATMENT: (Optional) Used for blocking/paired analysis when available. Note: Do not start values with numbers. REPLICATE: A simple count (1, 2, 3, \u2026) per sample. For differential analysis , sort rows so that the first group ( group1 ) appears before the second ( group2 ) for contrasts ( group1-group2 ). \u2b06 Back to top","title":"Steps"},{"location":"manual_workflows/#stage-2-running-diffbind-analysis","text":"","title":"Stage 2: Running DiffBind Analysis"},{"location":"manual_workflows/#purpose_1","text":"Use the CSV created in Stage 1 and DiffBind to identify consensus peaks and normalize read counts. QC mode analysis produces a TMM-normalized counts table, suitable for use with external differential peak callers or for generating heatmaps. It also calculates PCA and UMAP coordinates. Differential peak calling analysis uses DiffBind to identify differential peaks, as done in the chrom-seek pipeline.","title":"Purpose"},{"location":"manual_workflows/#input-files-required","text":"DiffBind CSV file (from Stage 1 ) BAM (and associated BAI) files and peak files referenced in the CSV","title":"Input Files Required"},{"location":"manual_workflows/#prepare-run-conditions","text":"Request an interactive session (adjust resources if needed): sinteractive -N 1 -n 1 --time = 1 -12:00:00 --mem = 100G --gres = lscratch:200 --cpus-per-task = 4 Initialize the Singularity container for DiffBind v2. Note These conditions ensure lscratch remains accessible and that the Stage 1 CSV file can retain full paths without causing errors. Usage : singularity run \\ -C \\ -e \\ --env TMPDIR = /tmp,TMP = /tmp \\ -B /lscratch/ $SLURM_JOBID :/tmp,<PROJECT_WORKING_DIR>:<PROJECT_WORKING_DIR>:rw \\ docker://skchronicles/cfchip_toolkit:v0.5.0 \\ bash Example : working_dir = /data/OpenOmics/dev/datasets/outputs/test_homer singularity run \\ -C \\ -e \\ --env TMPDIR = /tmp,TMP = /tmp,working_dir = $working_dir \\ -B /lscratch/ $SLURM_JOBID :/tmp, $working_dir : $working_dir :rw \\ docker://skchronicles/cfchip_toolkit:v0.5.0 \\ bash","title":"Prepare Run Conditions"},{"location":"manual_workflows/#stage-2a-qc-mode-analysis","text":"Run DiffBind_v2_QC.Rmd . Notes - Rmarkdown requires full paths; otherwise it looks for <INPUT_CSV_FILE> in <WORKING_DIR>/bin . - The <PEAK_TOOL> token must be one of: macsNarrow , Genrich , macsBroad , SEACR . Usage : Rscript -e 'rmarkdown::render(\"<WORKING_DIR>/bin/DiffBind_v2_QC.Rmd\", output_file=\"<OUTPUT_HTML_FILE>\", params=list(csvfile=\"<INPUT_CSV_FILE>\", counts_bed=\"<OUTPUT_BED_FILE>\", counts_csv=\"<OUTPUT_COUNTS_CSV_FILE>\", peakcaller=\"<PEAK_TOOL>\"))' Example : Rscript -e 'rmarkdown::render(\"/data/OpenOmics/dev/datasets/outputs/test_homer/bin/DiffBind_v2_QC.Rmd\", output_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/PeakQC/DB_QC/AllSamples-macsNarrow/AllSamples-macsNarrow_DiffBindQC.html\", params=list(csvfile=\"/data/OpenOmics/dev/datasets/outputs/test_homer/PeakQC/DB_QC/AllSamples-macsNarrow/AllSamples-macsNarrow_DiffBind_prep.csv\", counts_bed=\"/data/OpenOmics/dev/datasets/outputs/test_homer/PeakQC/DB_QC/AllSamples-macsNarrow/AllSamples-macsNarrow_DiffBindQC_TMMcounts.bed\", counts_csv=\"/data/OpenOmics/dev/datasets/outputs/test_homer/PeakQC/DB_QC/AllSamples-macsNarrow/AllSamples-macsNarrow_DiffBindQC_TMMcounts.csv\", peakcaller=\"macsNarrow\"))'","title":"Stage 2A: QC Mode Analysis"},{"location":"manual_workflows/#stage-2b-differential-peak-calling-analysis","text":"Load counts using DiffBind_v2_load.R . Note The <PEAK_TOOL> token must be one of: macsNarrow , Genrich , macsBroad , SEACR . Usage : <WORKING_DIR>/bin/DiffBind_v2_load.R \\ --csvfile <INPUT_CSV_FILE> \\ --counts <INPUT_RDS_FILE> \\ --list <OUTPUT_PEAK_BED_FILE> \\ --peakcaller <PEAK_TOOL> Example : /data/OpenOmics/dev/datasets/outputs/test_homer/bin/DiffBind_v2_load.R \\ --csvfile /data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsBroad/IFN0h_vs_IFN24h-macsBroad_Diffbind_prep.csv \\ --counts /data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsBroad/IFN0h_vs_IFN24h-macsBroad_Diffbind_counts.rds \\ --list /data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsBroad/IFN0h_vs_IFN24h-macsBroad_Diffbind_fullList.bed \\ --peakcaller macsBroad Execute differential comparisons using DiffBind v2.15.2 . 1) Choose the method: DESeq2 or edgeR . DESeq2 generally suggested. Consider EdgeR when there is large variance in library size, library size is confounding, or there are prior knowledge suggesting that there should be an equivalent number of peaks on both sides of the contrast. 2) Decide whether your design requires no blocking or blocking (paired or batch effects). 3) Select the relevant script ( <ANALYSIS_SCRIPT> ): - <WORKING_DIR>/bin/DiffBind_v2_Deseq2.Rmd - <WORKING_DIR>/bin/DiffBind_v2_Deseq2_block.Rmd - <WORKING_DIR>/bin/DiffBind_v2_EdgeR.Rmd - <WORKING_DIR>/bin/DiffBind_v2_EdgeR_block.Rmd 4) Define the group contrast from your experimental setup: \"{group1}_vs_{group2}\" \u2192 <INPUT_CONTRASTS> . 5) Render the report: > **Note** > The `<PEAK_TOOL>` token must be one of: `macsNarrow`, `Genrich`, `macsBroad`, `SEACR`. **Usage**: ```bash Rscript -e 'rmarkdown::render(\"<ANALYSIS_SCRIPT>\", output_file=\"<OUTPUT_DIFFBIND_REPORT_FILE>\", params=list(csvfile=\"<INPUT_CSV_FILE>\", peakcaller=\"<PEAK_TOOL>\", list_file=\"<OUTPUT_PEAK_BED_LIST>\", up_file=\"<OUTPUT_UP_REGULATED_FILE>\", down_file=\"<OUTPUT_DOWN_REGULATED_FILE>\", contrasts=\"<INPUT_CONTRASTS>\", counts=\"<INPUT_PEAK_COUNTS_RDS_FILE>\"))' ``` **Example**: ```bash Rscript -e 'rmarkdown::render(\"/data/OpenOmics/dev/datasets/outputs/test_homer/bin/DiffBind_v2_Deseq2.Rmd\", output_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_DeSeq2.html\", params=list(csvfile=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_prep.csv\", peakcaller=\"macsNarrow\", list_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_DeSeq2_peak_list.tab\", up_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_DeSeq2_up.bed\", down_file=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_DeSeq2_down.bed\", contrasts=\"IFN0h_vs_IFN24h\", counts=\"/data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_counts.rds\"))' ``` \u2b06 Back to top","title":"Stage 2B: Differential Peak Calling Analysis"},{"location":"manual_workflows/#stage-3-peak-annotation-with-uropa","text":"","title":"Stage 3: Peak Annotation with UROPA"},{"location":"manual_workflows/#purpose_2","text":"Annotate genomic peaks with gene information, regulatory elements, and genomic context using UROPA.","title":"Purpose"},{"location":"manual_workflows/#input-files-required_1","text":"Peak file (BED or narrowPeak format) <PEAK_FILE> GTF annotation file <GTF_FILE> UROPA configuration file <UROPA_CONFIG> The GTF file used in the pipeline can be found in config.json under [references][<SPECIES>][GTFFILE] .","title":"Input Files Required"},{"location":"manual_workflows/#steps_1","text":"Create a UROPA configuration file. The example below is what is currently used for chrom-seek when assay is not cfchip . { \"queries\" : [ { \"feature\" : [ \"gene\" ], \"filter_attribute\" : \"gene_type\" , \"attribute_values\" : [ \"protein_coding\" ], \"feature_anchor\" : [ \"start\" ], \"distance\" : [ 3000 , 1000 ], \"name\" : \"query_1\" }, { \"feature\" : [ \"gene\" ], \"filter_attribute\" : \"gene_type\" , \"attribute_values\" : [ \"protein_coding\" ], \"feature_anchor\" : [ \"start\" ], \"distance\" : [ 10000 ], \"name\" : \"query_2\" }, { \"feature\" : [ \"gene\" ], \"filter_attribute\" : \"gene_type\" , \"attribute_values\" : [ \"protein_coding\" ], \"feature_anchor\" : [ \"start\" ], \"distance\" : [ 100000 ], \"name\" : \"query_3\" } ], \"show_attributes\" : [ \"gene_id\" , \"gene_name\" , \"gene_type\" ], \"priority\" : \"True\" , \"gtf\" : \"<GTF_FILE>\" , \"bed\" : \"<PEAK_FILE>\" } Run UROPA on Biowulf (or in your container). This example uses the uropa module. We suggest 4 threads and 10G memory. Usage : module load uropa/4.0.2 uropa -i <UROPA_CONFIG> -t 4 Example : module load uropa/4.0.2 uropa -i sample_config.json -t 4 \u2b06 Back to top","title":"Steps"},{"location":"manual_workflows/#stage-4-merging-annotations-with-differential-results","text":"","title":"Stage 4: Merging Annotations with Differential Results"},{"location":"manual_workflows/#purpose_3","text":"Combine differential binding results from Stage 2 with gene annotations from Stage 3 to generate comprehensive results tables.","title":"Purpose"},{"location":"manual_workflows/#input-files-required_2","text":"DiffBind peak list ( <OUTPUT_PEAK_BED_LIST> ) from Stage 2 UROPA results ( <UROPA_FINAL_HITS> ) from Stage 3","title":"Input Files Required"},{"location":"manual_workflows/#steps_2","text":"Merge differential results with annotations. Optionally filter at a stricter FDR or fold-change threshold than defaults. Set FDR to 1 for all peaks analyzed. Usage : python <WORKING_DIR>/bin/merge_diffbind_uropa.py \\ --diffbind <DIFFBIND_PEAK_LIST_FILE> \\ --uropa <UROPA_FINAL_HITS> \\ --fdr <FDR_THRESHOLD> \\ --fold <FC_THRESHOLD> \\ --output <MERGE_OUTPUT> Example : python /data/OpenOmics/dev/datasets/outputs/test_homer/bin/merge_diffbind_uropa.py \\ --uropa /data/OpenOmics/dev/datasets/outputs/test_homer/UROPA_annotations/DiffBind/IFN0h_vs_IFN24h-macsNarrow-EdgeR/IFN0h_vs_IFN24h_macsNarrow_EdgeR_protTSS_uropa_finalhits.txt \\ --diffbind /data/OpenOmics/dev/datasets/outputs/test_homer/DiffBind/IFN0h_vs_IFN24h-macsNarrow/IFN0h_vs_IFN24h-macsNarrow_Diffbind_EdgeR_peak_list.tab \\ --output /data/OpenOmics/dev/datasets/outputs/test_homer/UROPA_DIFFBIND_TBLS/IFN0h_vs_IFN24h-macsNarrow-EdgeR_protTSS_UROPA_DIFFBIND_JOIN.txt \\ --fdr 0 .05 \\ --fold 0 \u2b06 Back to top","title":"Steps"},{"location":"manual_workflows/#getting-help","text":"Biowulf user guide (for sinteractive ) DiffBind v2.0.2 documentation DiffBind v1.2.4 vignette (archival) UROPA manual","title":"Getting Help"},{"location":"tools_software/","text":"Tools and versions \u00b6 Quality-control assessment tools \u00b6 The chrom-seek pipeline runs a series of quality-control (QC) tools to assess the sequencing and library quality of each sample. The tools used in the pipeline are listed below, along with their versions and a brief description of their purpose. Tool Version Notes FastQC 1 0.11.9 Assess sequencing quality, run before and after adapter trimming Kraken 2 2.1.2 Assess microbial taxonomic composition KronaTools 3 2.8.1 Visualize kraken output FastQ Screen 4 0.9.3 Assess contamination; additional dependencies: bowtie2/2.5.1 , perl/5.36 Preseq 5 3.1.2 Estimate library complexity MultiQC 6 1.14 Aggregate sample statistics and quality-control information across all samples References 1. FastQC: Andrews, S. (2010). FastQC: a quality control tool for high throughput sequence data. https://www.bioinformatics.babraham.ac.uk/projects/fastqc 2. Kraken: Wood, D. E. and S. L. Salzberg (2014). \"Kraken: ultrafast metagenomic sequence classification using exact alignments.\" Genome Biol 15(3): R46. http://ccb.jhu.edu/software/kraken/ 3. Krona: Ondov, B. D., et al. (2011). \"Interactive metagenomic visualization in a Web browser.\" BMC Bioinformatics 12(1): 385. https://github.com/marbl/Krona/wiki 4. FastQ Screen: Wingett, S. and S. Andrews (2018). \"FastQ Screen: A tool for multi-genome mapping and quality control.\" F1000Research 7(2): 1338. https://www.bioinformatics.babraham.ac.uk/projects/fastq_screen/ 5. Preseq: Daley, T. and A.D. Smith (2013). Predicting the molecular complexity of sequencing libraries. Nat Methods 10(4): 325-7. http://smithlabresearch.org/software/preseq/ 6. MultiQC: Ewels, P., et al. (2016). \"MultiQC: summarize analysis results for multiple tools and samples in a single report.\" Bioinformatics 32(19): 3047-3048. https://multiqc.info/docs/ Data processing tools \u00b6 The pipeline is composed of a series of data processing steps that include adapter trimming, read alignment, duplicate removal, and bigwig creation. The tools used in the pipeline are listed below, along with their versions and a brief description of their purpose. Tool Version Notes Cutadapt 1 4.4 Remove adapter sequences and perform quality trimming BWA mem 2 0.7.17 Read alignment, first to identify reads aligning to blacklisted regions and later for the remainder of the genome Picard 3 2.27.3 Run SamToFastq (for blacklist read removal) and MarkDuplicates (to remove PCR duplicates in PE data) SAMtools 4 1.17 Remove reads with mapQ less than 6. Also run flagstat and idxstats to calculate alignment statistics. MACS 5 2.2.7.1 Run filterdup on SE data ( --keep-dup=\"auto\" ) to remove PCR duplicates Bedtools 6 2.27.1 Run intersect and bedtobam to convert .tag.Align.gz to .bam for use with deeptools (specific to SE data) and MEME ppqt 7,8 1.1.2 Also known as phantompeakqualtools, used to calculate estimated fragment length (used for bigwig and peak calling for SE data). Also produces QC metrics: NSC and RSC. deepTools 9 3.5.1 Used for bigwig creation and multiple QC metrics. Use bamcoverage to create RPGC-normalized data: --binSize 25 --smoothLength 75 --normalizeUsing RPGC . For PE data, add --centerReads . For control SE, add -e 200 . For ChIP SE, add -e [estimated fragmentlength] . For control subtraction (inputnorm), use bigwigCompare: --binSize 25 --operation 'subtract' . Run multiBigWigSummary, plotCorrelation, plotPCA, plotFingerprint, computeMatrix, plotHeatmap, and plotProfile for QC plots. Note: not all these have been reincorporated into the pipeline. References 1. Cutadapt: Martin, M. (2011). \"Cutadapt removes adapter sequences from high-throughput sequencing reads.\" EMBnet 17(1): 10-12. https://cutadapt.readthedocs.io/en/stable/ 2. BWA: Li H. and Durbin R. (2009) Fast and accurate short read alignment with Burrows-Wheeler Transform. Bioinformatics 25: 1754-60. http://bio-bwa.sourceforge.net/bwa.shtml 3. Picard: The Picard toolkit. https://broadinstitute.github.io/picard/ 4. SAMtools: Danecek, Petr et al. \u201cTwelve years of SAMtools and BCFtools.\u201d GigaScience vol. 10,2 (2021): giab008. 5. MACS: Zhang, Y., et al. (2008). Model-based Analysis of ChIP-Seq (MACS). Genome Biol 9: R137. https://github.com/macs3-project/MACS 6. Bedtools: Quinlan, A.R. (2014). BEDTools: The Swiss\u2010Army Tool for Genome Feature Analysis. Current Protocols in Bioinformatics, 47: 11.12.1-11.12.34. https://bedtools.readthedocs.io/en/latest/index.html 7. Ppqt: Landt S.G., et al. (2012). ChIP-seq guidelines and practices of the ENCODE and modENCODE consortia. Genome Res 22(9): 1813-31. https://github.com/kundajelab/phantompeakqualtools 8. Ppqt: Kharchenko P.K., et al. (2008). Design and analysis of ChIP-seq experiments for DNA-binding proteins Nat Biotechnol 26(12): 1351-9. 9. deepTools: Ram\u00edrez, F., et al. (2016). deepTools2: A next Generation Web Server for Deep-Sequencing Data Analysis. Nucleic Acids Research 44(W1): W160--W165. https://deeptools.readthedocs.io/en/develop/ Peak calling and differential peak calling tools \u00b6 The pipeline includes peak calling and differential peak calling tools to identify enriched regions of interest in the genome. The tools used in the pipeline are listed below, along with their versions and a brief description of their purpose. Tool Version Notes MACS 1 2.2.7.1 macsNarrow : The macs2 caller optimized for narrow peaks, widely recognized as the most popular peak calling algorithm. Typically used in large databases, it identifies peaks within the range of 150bp to 10kb. Originally designed to handle peaks with a single maxima/summit, its false discovery rate (FDR) has been greatly improved with the addition of an \"input\" control. It is generally more accurate than most other peak callers, even without controls. macsBroad : The macs2 caller for slightly broader peaks, sharing a similar algorithm with macsNarrow. It is particularly useful when peaks exhibit more than one maxima/summit. Sicer 2 2-1.0.3 Sicer is a broad peak caller that can be highly effective for certain histone marks. However, it may not perform well for extra broad domains such as lamins or some repressive marks. It allows for a small amount of gaps between peaks, and users may need to adjust window and gap parameters for optimal results. Genrich 3 0.6 Designed with ATAC-seq data in mind, Genrich can yield excellent results. However, it may not be universally favored by all collaborators due to its lack of formal publication or review. SEACR 4 1.3 Peak caller for CUT & RUN or CUT & TAG only; can utilize IgG as if it was an input control, but assumes IgG is sparse. MANorm 5 1.1.4 Differential peak calling when no replicates. This tool has not been incorporated into the pipeline. DiffBind 6,7 2.15.2 Used for conducting differential peak calling analyses, this tool integrates with Deseq2 and EdgeR for analysis. Here is a link to DiffBind's documentation. References 1. MACS: Zhang, Y., et al. (2008). Model-based Analysis of ChIP-Seq (MACS). Genome Biol 9: R137. https://github.com/macs3-project/MACS 2. Sicer: Xu S., et al. (2014). Spatial Clustering for Identification of ChIP-Enriched Regions (SICER) to Map Regions of Histone Methylation Patterns in Embryonic Stem Cells. Methods Mol Biol 1150: 97--111. https://zanglab.github.io/SICER2/ 3. Genrich: Gaspar,J.M. (2018) Genrich: Detecting sites of genomic enrichment. https://github.com/jsh58/Genrich . 4. SEACR: Meers MP, Tenenbaum D, Henikoff S. (2019). Peak calling by Sparse Enrichment Analysis for CUT&RUN chromatin profiling. Epigenetics and Chromatin 12(1):42. https://github.com/FredHutch/SEACR 5. MANorm: Shao, Z., et al. (2012). MAnorm: a robust model for quantitative comparison of ChIP-Seq data sets. Genome Biology 13: R16. https://manorm.readthedocs.io/en/latest/index.html 6. DiffBind: Ross-Innes C.S., et al. (2012). Differential oestrogen receptor binding is associated with clinical outcome in breast cancer. Nature 481: 389--393. 7. DiffBind: Stark R. and G. Brown. (2011). DiffBind: differential binding analysis of ChIP-Seq peak data. http://bioconductor.org/packages/release/bioc/vignettes/DiffBind/inst/doc/DiffBind.pdf 8. Deseq2: Love, Michael I et al. \u201cModerated estimation of fold change and dispersion for RNA-seq data with DESeq2.\u201d Genome biology vol. 15,12 (2014): 550. Annotations, motifs, and QC metrics \u00b6 The pipeline includes tools for peak annotation, motif calling, and quality-control metrics. The tools used in the pipeline are listed below, along with their versions and a brief description of their purpose. Tool Version Notes Uropa 1 4.0.3 Uropa is utilized for peak annotations, providing comprehensive annotation features. Here is a link to Uropa's documentation. See the glossary for options in this pipeline: link . Homer 2 4.11.1 Homer is being used for motif calling MEME 3 5.5.5 Employed for motif analysis, the MEME suite includes MEME-ChIP for de novo motif discovery and AME for known motif analysis. Note that the Centrimo subcomponent of MEME-ChIP may produce inaccurate results for broad peak calling tools. Here is a link to MEME suite's documentation. IDR 4 2.0.3 One method for identifying consensus peaks. Only works for 2 replicates. This tool is not currently in the pipeline. Jaccard NA Calculation of peak call consistency between two conditions. This is currently is not included in the pipeline. Requires: pybedtools pysam . FRiP NA Represents the \"fraction of reads in peaks\" calculated as the proportion of aligned reads falling within the peaks called by specific tool for a given sample. Requires: pybedtools pysam References 1. Uropa: Kondili M., et al. (2017). UROPA: a tool for Universal RObust Peak Annotation. Scientific Reports 7: 2593. 2. Homer: Heinz S., et al. (2010). Simple combinations of lineage-determining transcription factors prime cis-regulatory elements required for macrophage and B cell identities. Mol Cell 38(4): 576--589. 3. MEME: Bailey T.L., et al. (2015). The MEME Suite. Nucleic Acids Res 43(W1):W39-W49. 4. IDR: Li Q., et al. (2011). Measuring reproducibility of high-throughput experiments. Ann Appl Stat 5(3): 1752-1779. Reference genome resources \u00b6 Blacklist citation : The ENCODE Project Consortium., Moore, J.E., Purcaro, M.J. et al. Expanded encyclopaedias of DNA elements in the human and mouse genomes. Nature 583, 699\u2013710 (2020). excluderanges citation : Jonathan D Ogata, Wancen Mu, Eric S Davis, Bingjie Xue, J Chuck Harrell, Nathan C Sheffield, Douglas H Phanstiel, Michael I Love, Mikhail G Dozmorov, excluderanges: exclusion sets for T2T-CHM13, GRCm39, and other genome assemblies, Bioinformatics, Volume 39, Issue 4, April 2023, btad198, https://doi.org/10.1093/bioinformatics/btad198 Reference Version Website hg19 GrCh37.p13 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/GRCh37.p13.genome.fa.gz Gencode v19 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gtf.gz Blacklist v1 https://www.encodeproject.org/files/ENCFF356LFX/@@download/ENCFF356LFX.bed.gz Enhancer reference https://fantom.gsc.riken.jp/5/datafiles/latest/extra/Enhancers/human_permissive_enhancers_phase_1_and_2.bed.gz hg38 GRCh38.p12 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_28/GRCh38.p12.genome.fa.gz Gencode v28 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_28/gencode.v28.annotation.gtf.gz Blacklist v2 http://mitra.stanford.edu/kundaje/akundaje/release/blacklists/hg38-human/hg38.blacklist.bed.gz Enhancer reference https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v9/extra/CAGE_peaks/hg38_fair_CAGE_peaks_combined_phase1+2.bed.gz mm10 GRCm38.p6 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M18/GRCm38.p6.genome.fa.gz Gencode vM18 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M18/gencode.vM18.annotation.gtf.gz Blacklist v2 http://mitra.stanford.edu/kundaje/akundaje/release/blacklists/mm10-mouse/mm10.blacklist.bed.gz Enhancer reference https://fantom.gsc.riken.jp/5/datafiles/reprocessed/mm10_v9/extra/CAGE_peaks/mm10_fair+new_CAGE_peaks_phase1and2.bed.gz rheMac10 Ensembl 110 Chr1 example: https://ftp.ensembl.org/pub/release-110/fasta/macaca_mulatta/dna/Macaca_mulatta.Mmul_10.dna.primary_assembly.1.fa.gz Ensembl 110 https://ftp.ensembl.org/pub/release-110/gtf/macaca_mulatta/Macaca_mulatta.Mmul_10.110.chr.gtf.gz mm39 GRCm39 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M37/GRCm39.primary_assembly.genome.fa.gz Gencode vM37 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M37/gencode.vM37.basic.annotation.gtf.gz Note: All fastas and gtfs in built into this pipeline only include reference chromosomes, ie autosomes and sex chromosomes. See: https://github.com/Boyle-Lab/Blacklist/tree/master/lists for all v1 and v2 blacklists available. Main differences between assays \u00b6 ChIP Only assay that can handle SE data Peak callers are: macs Narrow and macs Broad cfChIP Peak caller is: macs Narrow Only runs on hg19 Filters chromosome X Changes to annotation conditions UMAP plot created in the DiffBindQC report Some rules run in the other versions do not run here ATAC Peak callers are: macs Narrow and Genrich cutnrun Peak callers are: macs Narrow and SEACR Acknowledgements \u00b6 Biowulf \u00b6 If you utilized NIH's Biowulf cluster to run chrom-seek , please do not forget to provide an acknowlegement ! The continued growth and support of NIH's Biowulf cluster is dependent upon its demonstrable value to the NIH Intramural Research Program. If you publish research that involved significant use of Biowulf, please cite the cluster. Suggested citation text This work utilized the computational resources of the NIH HPC Biowulf cluster. (http://hpc.nih.gov)","title":"Tools/References"},{"location":"tools_software/#tools-and-versions","text":"","title":"Tools and versions"},{"location":"tools_software/#quality-control-assessment-tools","text":"The chrom-seek pipeline runs a series of quality-control (QC) tools to assess the sequencing and library quality of each sample. The tools used in the pipeline are listed below, along with their versions and a brief description of their purpose. Tool Version Notes FastQC 1 0.11.9 Assess sequencing quality, run before and after adapter trimming Kraken 2 2.1.2 Assess microbial taxonomic composition KronaTools 3 2.8.1 Visualize kraken output FastQ Screen 4 0.9.3 Assess contamination; additional dependencies: bowtie2/2.5.1 , perl/5.36 Preseq 5 3.1.2 Estimate library complexity MultiQC 6 1.14 Aggregate sample statistics and quality-control information across all samples References 1. FastQC: Andrews, S. (2010). FastQC: a quality control tool for high throughput sequence data. https://www.bioinformatics.babraham.ac.uk/projects/fastqc 2. Kraken: Wood, D. E. and S. L. Salzberg (2014). \"Kraken: ultrafast metagenomic sequence classification using exact alignments.\" Genome Biol 15(3): R46. http://ccb.jhu.edu/software/kraken/ 3. Krona: Ondov, B. D., et al. (2011). \"Interactive metagenomic visualization in a Web browser.\" BMC Bioinformatics 12(1): 385. https://github.com/marbl/Krona/wiki 4. FastQ Screen: Wingett, S. and S. Andrews (2018). \"FastQ Screen: A tool for multi-genome mapping and quality control.\" F1000Research 7(2): 1338. https://www.bioinformatics.babraham.ac.uk/projects/fastq_screen/ 5. Preseq: Daley, T. and A.D. Smith (2013). Predicting the molecular complexity of sequencing libraries. Nat Methods 10(4): 325-7. http://smithlabresearch.org/software/preseq/ 6. MultiQC: Ewels, P., et al. (2016). \"MultiQC: summarize analysis results for multiple tools and samples in a single report.\" Bioinformatics 32(19): 3047-3048. https://multiqc.info/docs/","title":"Quality-control assessment tools"},{"location":"tools_software/#data-processing-tools","text":"The pipeline is composed of a series of data processing steps that include adapter trimming, read alignment, duplicate removal, and bigwig creation. The tools used in the pipeline are listed below, along with their versions and a brief description of their purpose. Tool Version Notes Cutadapt 1 4.4 Remove adapter sequences and perform quality trimming BWA mem 2 0.7.17 Read alignment, first to identify reads aligning to blacklisted regions and later for the remainder of the genome Picard 3 2.27.3 Run SamToFastq (for blacklist read removal) and MarkDuplicates (to remove PCR duplicates in PE data) SAMtools 4 1.17 Remove reads with mapQ less than 6. Also run flagstat and idxstats to calculate alignment statistics. MACS 5 2.2.7.1 Run filterdup on SE data ( --keep-dup=\"auto\" ) to remove PCR duplicates Bedtools 6 2.27.1 Run intersect and bedtobam to convert .tag.Align.gz to .bam for use with deeptools (specific to SE data) and MEME ppqt 7,8 1.1.2 Also known as phantompeakqualtools, used to calculate estimated fragment length (used for bigwig and peak calling for SE data). Also produces QC metrics: NSC and RSC. deepTools 9 3.5.1 Used for bigwig creation and multiple QC metrics. Use bamcoverage to create RPGC-normalized data: --binSize 25 --smoothLength 75 --normalizeUsing RPGC . For PE data, add --centerReads . For control SE, add -e 200 . For ChIP SE, add -e [estimated fragmentlength] . For control subtraction (inputnorm), use bigwigCompare: --binSize 25 --operation 'subtract' . Run multiBigWigSummary, plotCorrelation, plotPCA, plotFingerprint, computeMatrix, plotHeatmap, and plotProfile for QC plots. Note: not all these have been reincorporated into the pipeline. References 1. Cutadapt: Martin, M. (2011). \"Cutadapt removes adapter sequences from high-throughput sequencing reads.\" EMBnet 17(1): 10-12. https://cutadapt.readthedocs.io/en/stable/ 2. BWA: Li H. and Durbin R. (2009) Fast and accurate short read alignment with Burrows-Wheeler Transform. Bioinformatics 25: 1754-60. http://bio-bwa.sourceforge.net/bwa.shtml 3. Picard: The Picard toolkit. https://broadinstitute.github.io/picard/ 4. SAMtools: Danecek, Petr et al. \u201cTwelve years of SAMtools and BCFtools.\u201d GigaScience vol. 10,2 (2021): giab008. 5. MACS: Zhang, Y., et al. (2008). Model-based Analysis of ChIP-Seq (MACS). Genome Biol 9: R137. https://github.com/macs3-project/MACS 6. Bedtools: Quinlan, A.R. (2014). BEDTools: The Swiss\u2010Army Tool for Genome Feature Analysis. Current Protocols in Bioinformatics, 47: 11.12.1-11.12.34. https://bedtools.readthedocs.io/en/latest/index.html 7. Ppqt: Landt S.G., et al. (2012). ChIP-seq guidelines and practices of the ENCODE and modENCODE consortia. Genome Res 22(9): 1813-31. https://github.com/kundajelab/phantompeakqualtools 8. Ppqt: Kharchenko P.K., et al. (2008). Design and analysis of ChIP-seq experiments for DNA-binding proteins Nat Biotechnol 26(12): 1351-9. 9. deepTools: Ram\u00edrez, F., et al. (2016). deepTools2: A next Generation Web Server for Deep-Sequencing Data Analysis. Nucleic Acids Research 44(W1): W160--W165. https://deeptools.readthedocs.io/en/develop/","title":"Data processing tools"},{"location":"tools_software/#peak-calling-and-differential-peak-calling-tools","text":"The pipeline includes peak calling and differential peak calling tools to identify enriched regions of interest in the genome. The tools used in the pipeline are listed below, along with their versions and a brief description of their purpose. Tool Version Notes MACS 1 2.2.7.1 macsNarrow : The macs2 caller optimized for narrow peaks, widely recognized as the most popular peak calling algorithm. Typically used in large databases, it identifies peaks within the range of 150bp to 10kb. Originally designed to handle peaks with a single maxima/summit, its false discovery rate (FDR) has been greatly improved with the addition of an \"input\" control. It is generally more accurate than most other peak callers, even without controls. macsBroad : The macs2 caller for slightly broader peaks, sharing a similar algorithm with macsNarrow. It is particularly useful when peaks exhibit more than one maxima/summit. Sicer 2 2-1.0.3 Sicer is a broad peak caller that can be highly effective for certain histone marks. However, it may not perform well for extra broad domains such as lamins or some repressive marks. It allows for a small amount of gaps between peaks, and users may need to adjust window and gap parameters for optimal results. Genrich 3 0.6 Designed with ATAC-seq data in mind, Genrich can yield excellent results. However, it may not be universally favored by all collaborators due to its lack of formal publication or review. SEACR 4 1.3 Peak caller for CUT & RUN or CUT & TAG only; can utilize IgG as if it was an input control, but assumes IgG is sparse. MANorm 5 1.1.4 Differential peak calling when no replicates. This tool has not been incorporated into the pipeline. DiffBind 6,7 2.15.2 Used for conducting differential peak calling analyses, this tool integrates with Deseq2 and EdgeR for analysis. Here is a link to DiffBind's documentation. References 1. MACS: Zhang, Y., et al. (2008). Model-based Analysis of ChIP-Seq (MACS). Genome Biol 9: R137. https://github.com/macs3-project/MACS 2. Sicer: Xu S., et al. (2014). Spatial Clustering for Identification of ChIP-Enriched Regions (SICER) to Map Regions of Histone Methylation Patterns in Embryonic Stem Cells. Methods Mol Biol 1150: 97--111. https://zanglab.github.io/SICER2/ 3. Genrich: Gaspar,J.M. (2018) Genrich: Detecting sites of genomic enrichment. https://github.com/jsh58/Genrich . 4. SEACR: Meers MP, Tenenbaum D, Henikoff S. (2019). Peak calling by Sparse Enrichment Analysis for CUT&RUN chromatin profiling. Epigenetics and Chromatin 12(1):42. https://github.com/FredHutch/SEACR 5. MANorm: Shao, Z., et al. (2012). MAnorm: a robust model for quantitative comparison of ChIP-Seq data sets. Genome Biology 13: R16. https://manorm.readthedocs.io/en/latest/index.html 6. DiffBind: Ross-Innes C.S., et al. (2012). Differential oestrogen receptor binding is associated with clinical outcome in breast cancer. Nature 481: 389--393. 7. DiffBind: Stark R. and G. Brown. (2011). DiffBind: differential binding analysis of ChIP-Seq peak data. http://bioconductor.org/packages/release/bioc/vignettes/DiffBind/inst/doc/DiffBind.pdf 8. Deseq2: Love, Michael I et al. \u201cModerated estimation of fold change and dispersion for RNA-seq data with DESeq2.\u201d Genome biology vol. 15,12 (2014): 550.","title":"Peak calling and differential peak calling tools"},{"location":"tools_software/#annotations-motifs-and-qc-metrics","text":"The pipeline includes tools for peak annotation, motif calling, and quality-control metrics. The tools used in the pipeline are listed below, along with their versions and a brief description of their purpose. Tool Version Notes Uropa 1 4.0.3 Uropa is utilized for peak annotations, providing comprehensive annotation features. Here is a link to Uropa's documentation. See the glossary for options in this pipeline: link . Homer 2 4.11.1 Homer is being used for motif calling MEME 3 5.5.5 Employed for motif analysis, the MEME suite includes MEME-ChIP for de novo motif discovery and AME for known motif analysis. Note that the Centrimo subcomponent of MEME-ChIP may produce inaccurate results for broad peak calling tools. Here is a link to MEME suite's documentation. IDR 4 2.0.3 One method for identifying consensus peaks. Only works for 2 replicates. This tool is not currently in the pipeline. Jaccard NA Calculation of peak call consistency between two conditions. This is currently is not included in the pipeline. Requires: pybedtools pysam . FRiP NA Represents the \"fraction of reads in peaks\" calculated as the proportion of aligned reads falling within the peaks called by specific tool for a given sample. Requires: pybedtools pysam References 1. Uropa: Kondili M., et al. (2017). UROPA: a tool for Universal RObust Peak Annotation. Scientific Reports 7: 2593. 2. Homer: Heinz S., et al. (2010). Simple combinations of lineage-determining transcription factors prime cis-regulatory elements required for macrophage and B cell identities. Mol Cell 38(4): 576--589. 3. MEME: Bailey T.L., et al. (2015). The MEME Suite. Nucleic Acids Res 43(W1):W39-W49. 4. IDR: Li Q., et al. (2011). Measuring reproducibility of high-throughput experiments. Ann Appl Stat 5(3): 1752-1779.","title":"Annotations, motifs, and QC metrics"},{"location":"tools_software/#reference-genome-resources","text":"Blacklist citation : The ENCODE Project Consortium., Moore, J.E., Purcaro, M.J. et al. Expanded encyclopaedias of DNA elements in the human and mouse genomes. Nature 583, 699\u2013710 (2020). excluderanges citation : Jonathan D Ogata, Wancen Mu, Eric S Davis, Bingjie Xue, J Chuck Harrell, Nathan C Sheffield, Douglas H Phanstiel, Michael I Love, Mikhail G Dozmorov, excluderanges: exclusion sets for T2T-CHM13, GRCm39, and other genome assemblies, Bioinformatics, Volume 39, Issue 4, April 2023, btad198, https://doi.org/10.1093/bioinformatics/btad198 Reference Version Website hg19 GrCh37.p13 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/GRCh37.p13.genome.fa.gz Gencode v19 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.annotation.gtf.gz Blacklist v1 https://www.encodeproject.org/files/ENCFF356LFX/@@download/ENCFF356LFX.bed.gz Enhancer reference https://fantom.gsc.riken.jp/5/datafiles/latest/extra/Enhancers/human_permissive_enhancers_phase_1_and_2.bed.gz hg38 GRCh38.p12 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_28/GRCh38.p12.genome.fa.gz Gencode v28 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_28/gencode.v28.annotation.gtf.gz Blacklist v2 http://mitra.stanford.edu/kundaje/akundaje/release/blacklists/hg38-human/hg38.blacklist.bed.gz Enhancer reference https://fantom.gsc.riken.jp/5/datafiles/reprocessed/hg38_v9/extra/CAGE_peaks/hg38_fair_CAGE_peaks_combined_phase1+2.bed.gz mm10 GRCm38.p6 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M18/GRCm38.p6.genome.fa.gz Gencode vM18 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M18/gencode.vM18.annotation.gtf.gz Blacklist v2 http://mitra.stanford.edu/kundaje/akundaje/release/blacklists/mm10-mouse/mm10.blacklist.bed.gz Enhancer reference https://fantom.gsc.riken.jp/5/datafiles/reprocessed/mm10_v9/extra/CAGE_peaks/mm10_fair+new_CAGE_peaks_phase1and2.bed.gz rheMac10 Ensembl 110 Chr1 example: https://ftp.ensembl.org/pub/release-110/fasta/macaca_mulatta/dna/Macaca_mulatta.Mmul_10.dna.primary_assembly.1.fa.gz Ensembl 110 https://ftp.ensembl.org/pub/release-110/gtf/macaca_mulatta/Macaca_mulatta.Mmul_10.110.chr.gtf.gz mm39 GRCm39 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M37/GRCm39.primary_assembly.genome.fa.gz Gencode vM37 https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M37/gencode.vM37.basic.annotation.gtf.gz Note: All fastas and gtfs in built into this pipeline only include reference chromosomes, ie autosomes and sex chromosomes. See: https://github.com/Boyle-Lab/Blacklist/tree/master/lists for all v1 and v2 blacklists available.","title":"Reference genome resources"},{"location":"tools_software/#main-differences-between-assays","text":"ChIP Only assay that can handle SE data Peak callers are: macs Narrow and macs Broad cfChIP Peak caller is: macs Narrow Only runs on hg19 Filters chromosome X Changes to annotation conditions UMAP plot created in the DiffBindQC report Some rules run in the other versions do not run here ATAC Peak callers are: macs Narrow and Genrich cutnrun Peak callers are: macs Narrow and SEACR","title":"Main differences between assays"},{"location":"tools_software/#acknowledgements","text":"","title":"Acknowledgements"},{"location":"tools_software/#biowulf","text":"If you utilized NIH's Biowulf cluster to run chrom-seek , please do not forget to provide an acknowlegement ! The continued growth and support of NIH's Biowulf cluster is dependent upon its demonstrable value to the NIH Intramural Research Program. If you publish research that involved significant use of Biowulf, please cite the cluster. Suggested citation text This work utilized the computational resources of the NIH HPC Biowulf cluster. (http://hpc.nih.gov)","title":"Biowulf"},{"location":"faq/Input_vs_IgG/","text":"Input control versus IgG \u00b6 IgG controls and input controls in ChIP are two very different types of controls and cannot be used interchangeably in most projects. Input controls are where you sonicate chromatin and directly turn that into a library so it accounts for openness of the chromatin. This is the kind of control that MACS can correct for directly in its model. IgG controls are pull-downs with IgG agarose beads without any antibodies. These libraries tend to be sequenced at much lower depth than all other samples, are typically super sparse, typically break all QC metrics due to over PCR-amplification, and in many cases are not overall useful.","title":"Input vs IgG"},{"location":"faq/Input_vs_IgG/#input-control-versus-igg","text":"IgG controls and input controls in ChIP are two very different types of controls and cannot be used interchangeably in most projects. Input controls are where you sonicate chromatin and directly turn that into a library so it accounts for openness of the chromatin. This is the kind of control that MACS can correct for directly in its model. IgG controls are pull-downs with IgG agarose beads without any antibodies. These libraries tend to be sequenced at much lower depth than all other samples, are typically super sparse, typically break all QC metrics due to over PCR-amplification, and in many cases are not overall useful.","title":"Input control versus IgG"},{"location":"faq/glossary/","text":"Glossary \u00b6 Important file name extensions \u00b6 The pipeline generates a lot of output files! Many intermediate output files have a unique name or extension to denote a special meaning. In a pipeline output directory, you may see one or many files contain the same base prefix but a different set of extensions, e.g.: sorted , Q5 , or Q5DD . What do each of these file extension(s) mean? sorted : Indicates that the data has been sorted, but no further filtering has been applied. Note: blacklisted reads are filtered before alignment. Q5 : Denotes that reads with a mapping quality below 5 have been filtered out. Q5DD : Indicates both low mapping quality filtering and deduplication (removal of PCR duplicates). For paired-end data, this means that no fragments with the same exact start and end position occur more than once. For single-end data, a negative binomial distribution cutoff filter created by MACS is used. RPGC : Stands for \"reads per genomic content,\" a normalization method based on library size. FRiP : Represents the \"fraction of reads in peaks,\" calculated as the proportion of aligned reads falling within the peaks called by a specific tool for a given sample. Annotation options: \u00b6 The specific parameters chosen are listed in the associated json and pdf files. All Uropa options listed here follow an iterative query approach. Currently only protTSS is active. Run parameters for other choices available upon request. Here are a list of different annotation options: genes : Analyze all genes in the GTF file using the most lenient parameters from Uropa. prot : Analyze only protein-coding genes in the GTF file using the most lenient parameters from Uropa. protSEC : Focuses on protein-coding genes, utilizing Uropa's multi-step annotation approach, and annotates sequentially based on gene start, end, center, and anywhere within the gene. protTSS : This is the most popular option and is ideal for most projects. It focuses exclusively on protein-coding genes and centers around transcription start sites (TSS). protTSS run conditions: - For most assays : - Query1: Peak center must be within 3kb upstream or 1kb downstream of the TSS (based upon gene orientation) - Query2: Peak center must be within 10kb of the TSS in either direction - Query3: Peak center must be within 100kb of the TSS in either direction - cfChIP : - Query1: Peak center must be within 3kb of the TSS in either direction - Query2: Peak center must be within 10kb of the TSS in either direction - Query3: Peak center must be within 100kb of the TSS in either direction File format types \u00b6 Details about many of these file formats can be found on this UCSC page . Here is a short description of import file types/formats created by the pipeline: bw : Short for bigwig. Binary file containing normalized pile-up patterns of data along chromosomes, viewable and adjustable across different window sizes. wig : Short for wiggle. Non-binary format of BigWig, with fixed-step and variable-step variants, each with specific formatting requirements. bed : Minimum 3-column file (chromosome, start, end), extendable up to 12 columns, used for various purposes due to standardized column order. Lacks a header. tagAlign : Simple bed file format, typically with each row representing a read, seldom used for peak information bedgraph : 3-column bed file with an additional score column. narrowPeak : Similar to bed file with additional columns for peak quality and summit location. broadPeak : Similar to narrowPeak but lacks the summit location column. Peak callers \u00b6 Peak callers are use to distinguish biological signal from noise within your dataset. Here are a list of peak callers the pipeline uses: macsNarrow : The macs2 caller optimized for narrow peaks, widely recognized as the most popular peak calling algorithm. Typically used in large databases, it identifies peaks within the range of 150bp to 10kb. Originally designed to handle peaks with a single maxima/summit, its false discovery rate (FDR) has been greatly improved with the addition of an \"input\" control. It is generally more accurate than most other peak callers, even without controls. https://github.com/macs3-project/MACS/ macsBroad : The macs2 caller for slightly broader peaks, sharing a similar algorithm with macsNarrow. It is particularly useful when peaks exhibit more than one maxima/summit. https://github.com/macs3-project/MACS/ SICER : SICER is a broad peak caller that can be highly effective for certain histone marks. However, it may not perform well for extra broad domains such as lamins or some repressive marks. It allows for a small amount of gaps between peaks, and users may need to adjust window and gap parameters for optimal results. https://zanglab.github.io/SICER2/ Genrich : Designed with ATAC-seq data in mind, Genrich can yield excellent results. However, it may not be universally favored by all collaborators due to its lack of formal publication or review. https://github.com/jsh58/Genrich Other important tools we use \u00b6 Here are a list of other important tools the pipeline uses: Deeptools : This tool is employed for visualizations and quality control (QC) purposes. You can find the documentation for Deeptools at link . DiffBind version2 : Used for conducting differential peak calling analyses, this tool integrates with Deseq2 and EdgeR for analysis. Here is a link to DiffBind's documentation. Uropa : Uropa is utilized for peak annotations, providing comprehensive annotation features. Here is a link to Uropa's documentation. MEME suite : Employed for motif analysis, the MEME suite includes MEME-ChIP for de novo motif discovery and AME for known motif analysis. Note that the Centrimo subcomponent of MEME-ChIP may produce inaccurate results for broad peak calling tools. Here is a link to MEME suite's documentation.","title":"Glossary of terms"},{"location":"faq/glossary/#glossary","text":"","title":"Glossary"},{"location":"faq/glossary/#important-file-name-extensions","text":"The pipeline generates a lot of output files! Many intermediate output files have a unique name or extension to denote a special meaning. In a pipeline output directory, you may see one or many files contain the same base prefix but a different set of extensions, e.g.: sorted , Q5 , or Q5DD . What do each of these file extension(s) mean? sorted : Indicates that the data has been sorted, but no further filtering has been applied. Note: blacklisted reads are filtered before alignment. Q5 : Denotes that reads with a mapping quality below 5 have been filtered out. Q5DD : Indicates both low mapping quality filtering and deduplication (removal of PCR duplicates). For paired-end data, this means that no fragments with the same exact start and end position occur more than once. For single-end data, a negative binomial distribution cutoff filter created by MACS is used. RPGC : Stands for \"reads per genomic content,\" a normalization method based on library size. FRiP : Represents the \"fraction of reads in peaks,\" calculated as the proportion of aligned reads falling within the peaks called by a specific tool for a given sample.","title":"Important file name extensions"},{"location":"faq/glossary/#annotation-options","text":"The specific parameters chosen are listed in the associated json and pdf files. All Uropa options listed here follow an iterative query approach. Currently only protTSS is active. Run parameters for other choices available upon request. Here are a list of different annotation options: genes : Analyze all genes in the GTF file using the most lenient parameters from Uropa. prot : Analyze only protein-coding genes in the GTF file using the most lenient parameters from Uropa. protSEC : Focuses on protein-coding genes, utilizing Uropa's multi-step annotation approach, and annotates sequentially based on gene start, end, center, and anywhere within the gene. protTSS : This is the most popular option and is ideal for most projects. It focuses exclusively on protein-coding genes and centers around transcription start sites (TSS). protTSS run conditions: - For most assays : - Query1: Peak center must be within 3kb upstream or 1kb downstream of the TSS (based upon gene orientation) - Query2: Peak center must be within 10kb of the TSS in either direction - Query3: Peak center must be within 100kb of the TSS in either direction - cfChIP : - Query1: Peak center must be within 3kb of the TSS in either direction - Query2: Peak center must be within 10kb of the TSS in either direction - Query3: Peak center must be within 100kb of the TSS in either direction","title":"Annotation options:"},{"location":"faq/glossary/#file-format-types","text":"Details about many of these file formats can be found on this UCSC page . Here is a short description of import file types/formats created by the pipeline: bw : Short for bigwig. Binary file containing normalized pile-up patterns of data along chromosomes, viewable and adjustable across different window sizes. wig : Short for wiggle. Non-binary format of BigWig, with fixed-step and variable-step variants, each with specific formatting requirements. bed : Minimum 3-column file (chromosome, start, end), extendable up to 12 columns, used for various purposes due to standardized column order. Lacks a header. tagAlign : Simple bed file format, typically with each row representing a read, seldom used for peak information bedgraph : 3-column bed file with an additional score column. narrowPeak : Similar to bed file with additional columns for peak quality and summit location. broadPeak : Similar to narrowPeak but lacks the summit location column.","title":"File format types"},{"location":"faq/glossary/#peak-callers","text":"Peak callers are use to distinguish biological signal from noise within your dataset. Here are a list of peak callers the pipeline uses: macsNarrow : The macs2 caller optimized for narrow peaks, widely recognized as the most popular peak calling algorithm. Typically used in large databases, it identifies peaks within the range of 150bp to 10kb. Originally designed to handle peaks with a single maxima/summit, its false discovery rate (FDR) has been greatly improved with the addition of an \"input\" control. It is generally more accurate than most other peak callers, even without controls. https://github.com/macs3-project/MACS/ macsBroad : The macs2 caller for slightly broader peaks, sharing a similar algorithm with macsNarrow. It is particularly useful when peaks exhibit more than one maxima/summit. https://github.com/macs3-project/MACS/ SICER : SICER is a broad peak caller that can be highly effective for certain histone marks. However, it may not perform well for extra broad domains such as lamins or some repressive marks. It allows for a small amount of gaps between peaks, and users may need to adjust window and gap parameters for optimal results. https://zanglab.github.io/SICER2/ Genrich : Designed with ATAC-seq data in mind, Genrich can yield excellent results. However, it may not be universally favored by all collaborators due to its lack of formal publication or review. https://github.com/jsh58/Genrich","title":"Peak callers"},{"location":"faq/glossary/#other-important-tools-we-use","text":"Here are a list of other important tools the pipeline uses: Deeptools : This tool is employed for visualizations and quality control (QC) purposes. You can find the documentation for Deeptools at link . DiffBind version2 : Used for conducting differential peak calling analyses, this tool integrates with Deseq2 and EdgeR for analysis. Here is a link to DiffBind's documentation. Uropa : Uropa is utilized for peak annotations, providing comprehensive annotation features. Here is a link to Uropa's documentation. MEME suite : Employed for motif analysis, the MEME suite includes MEME-ChIP for de novo motif discovery and AME for known motif analysis. Note that the Centrimo subcomponent of MEME-ChIP may produce inaccurate results for broad peak calling tools. Here is a link to MEME suite's documentation.","title":"Other important tools we use"},{"location":"faq/questions/","text":"Frequently Asked Questions \u00b6 This page is still under construction. If you need immediate help, please open an issue on Github!","title":"General Questions"},{"location":"faq/questions/#frequently-asked-questions","text":"This page is still under construction. If you need immediate help, please open an issue on Github!","title":"Frequently Asked Questions"},{"location":"usage/cache/","text":"chrom-seek cache \u00b6 1. About \u00b6 The chrom-seek executable is composed of several inter-related sub commands. Please see chrom-seek -h for all available options. This part of the documentation describes options and concepts for chrom-seek cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote resources for the chrom-seek pipeline. Caching remote resources allows the pipeline to run in an offline mode. The cache sub command can also be used to pull our pre-built reference bundles onto a new cluster or target system. The cache sub command creates local cache on the filesysytem for resources hosted on DockerHub or AWS S3. These resources are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created and re-used. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that its cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub. 2. Synopsis \u00b6 Coming Soon!","title":"chrom-seek cache"},{"location":"usage/cache/#chrom-seek-cache","text":"","title":"chrom-seek cache"},{"location":"usage/cache/#1-about","text":"The chrom-seek executable is composed of several inter-related sub commands. Please see chrom-seek -h for all available options. This part of the documentation describes options and concepts for chrom-seek cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote resources for the chrom-seek pipeline. Caching remote resources allows the pipeline to run in an offline mode. The cache sub command can also be used to pull our pre-built reference bundles onto a new cluster or target system. The cache sub command creates local cache on the filesysytem for resources hosted on DockerHub or AWS S3. These resources are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created and re-used. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that its cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub.","title":"1. About"},{"location":"usage/cache/#2-synopsis","text":"Coming Soon!","title":"2. Synopsis"},{"location":"usage/install/","text":"chrom-seek install \u00b6 1. About \u00b6 The chrom-seek executable is composed of several inter-related sub commands. Please see chrom-seek -h for all available options. This part of the documentation describes options and concepts for chrom-seek install sub command in more detail. This page is still under construction \ud83d\udc77, more information is coming soon!","title":"chrom-seek install"},{"location":"usage/install/#chrom-seek-install","text":"","title":"chrom-seek install"},{"location":"usage/install/#1-about","text":"The chrom-seek executable is composed of several inter-related sub commands. Please see chrom-seek -h for all available options. This part of the documentation describes options and concepts for chrom-seek install sub command in more detail. This page is still under construction \ud83d\udc77, more information is coming soon!","title":"1. About"},{"location":"usage/run/","text":"chrom-seek run \u00b6 1. About \u00b6 The chrom-seek executable is composed of several inter-related sub commands. Please see chrom-seek -h for all available options. This part of the documentation describes options and concepts for chrom-seek run sub command in more detail. With minimal configuration, the run sub command enables you to start running chrom-seek with one of its available data-processing pipelines. Setting up the chrom-seek pipeline is fast and easy! In its most basic form, chrom-seek run only has five required inputs . To run an available pipeline with your data raw data, please provide a space seperated list of FastQ (globbing is supported), an output directory to store results, a reference genome for alignment and annotation, an assay type to invoke a specific data-processing pipeline, and a peak call file to set sample metadata. 2. Synopsis \u00b6 $ chrom-seek run [--help] \\ [--mode {slurm,local}] [--job-name JOB_NAME] [--batch-id BATCH_ID] \\ [--tmp-dir TMP_DIR] [--silent] [--sif-cache SIF_CACHE] \\ [--singularity-cache SINGULARITY_CACHE] \\ [--dry-run] [--threads THREADS] \\ [--contrasts CONTRASTS] \\ --assay {cfChIP,ChIP,ATAC,cutnrun} \\ --genome GENOME \\ --input INPUT [INPUT ...] \\ --output OUTPUT \\ --peakcall PEAKCALL The synopsis for each command shows its arguments and their usage. Optional arguments are shown in square brackets. A user must provide a list of FastQ (globbing is supported) to analyze via --input argument and an output directory to store results via --output argument, define an assay type to select an appropriate data-processing pipeline via --assay argument, select a reference genome to be used for alignment and annotation via --genome argument, and a peakcall file to define groups/inputs/blocking factors for each sample. Use you can always use the -h option for information on a specific command. 2.1 Required arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --assay {cfChIP,ChIP,ATAC,cutnrun} Assay type or data-processing pipeline. type: string This option defines which pipeline will be run. chrom-seek supports the processing of bulk ChIP-seq (ChIP), cell-free DNA ChIP-seq (cfChIP), ATAC-seq (ATAC) samples, and CUT & RUN or CUT & TAG (cutnrun). Please select from one of the following data-processing pipelines: cfChIP , ChIP , ATAC , cutnrun . Example: --assay ChIP --genome {hg19,hg38,mm10,mm39} Reference genome. type: string This option defines the reference genome of the samples for alignment and annotation. There are prebuilt reference files for human (hg19 and hg38), mouse (mm10 and mm39), and rhesus data. Please select one of the following options: hg19 , hg38 , mm10 , mm39 , rheMac10 . Example: --genome hg19 --input INPUT [INPUT ...] Input FastQ. type: file(s) One or more FastQ files can be provided. From the command-line, each input file should seperated by a space. Globbing is supported! This makes selecting FastQ files easy. FastQ files should always be gzipp-ed. Only list files you want processed as all files in the list will be run through the initial pipeline steps. All file merging must be done before running the pipeline. Example: --input .tests/*.R?.fastq.gz --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /data/$USER/chrom-seek_out --peakcall PEAKCALL Peakcall file. type: file This tab delimited (TSV) file is used to pair each ChIP sample to its corresponding input sample and to assign any groups that are associated with said sample. Please note that multiple groups can be assigned to a given sample using a comma. Group information is used to setup comparsions within groups of samples. This file consists of three columns containing the name of each ChIP sample, the name of each Input (control) sample, and the name of its groups. Each sample must be assigned to at least one group. The header of this file needs to be Sample for the chips column, InputControl for the inputs column, and Group for the groups column (the column names are case insensitive; lower- upper- camelcase all work the same) . Group names currently cannot include \".\", \"-\", or \"_\". The base name of each sample should be listed in the Sample and InputControl columns. The base name of a given sample can be determined by removing its file extension from the sample's R1 FastQ file, example: WT_S4.R1.fastq.gz becomes WT_S4 in the peakcall file. WT_S4_R1_001.fastq.gz also becomes WT_S4 . An optional column, called Block, can also be provided to block duplicate correlations between repeated observations. Typically, blocks are biological replicates or multiple samples from same indivdual. Contents of example peakcalls file: Sample InputControl Group WT_S1 IN_S1 G1,G3 WT_S2 IN_S2 G1,G3 WT_S3 IN_S3 G1 WT_S4 IN_S4 G2,G4 WT_S5 IN_S5 G2,G4 WT_S6 IN_S6 G2 Example: --peakcall /data/$USER/peakcall.tsv 2.2 Analysis options \u00b6 Each of the following arguments are optional, and do not need to be provided. 2.2.1 Differential Binding/Accessibility \u00b6 --contrasts CONTRASTS Contrasts file. type: file This tab delimited (TSV) file is used to setup comparisons within different groups of samples. Please see the --peakcall option above for more information about how to define groups within a set of samples. This file consists of two columns containing the names of two groups to compare. The names defined in this file must also exist in the peakcall file. Please note: the ordering of groups is preserved when creating contrasts. This is important because it dicates how to interpret the direction of the fold-change for your comparison. In the example below, the first comparison can be interpreted as G2 vs. G1 . This would result in the following contrast: G2-G1 . Within the context of differential binding analysis, a positive fold-change would indicate that the G2 group has higher levels of binding (cfChIP/ChIP) or accessibility (ATAC) at X region. Contents of example contrasts file: G2 G1 G4 G1 G4 G3 Example: --contrasts /data/$USER/contrasts.tsv 2.3 Orchestration options \u00b6 Each of the following arguments are optional, and do not need to be provided. --dry-run Dry run the pipeline. type: boolean flag Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run --silent Silence standard output. type: boolean flag Reduces the amount of information directed to standard output when submitting master job to the job scheduler. Only the job id of the master job is returned. Example: --silent --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. slurm The slurm execution method will submit jobs to the SLURM workload manager . It is recommended running chrom-seek in this mode as execution will be significantly faster in a distributed environment. This is the default mode of execution. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. Example: --mode slurm --job-name JOB_NAME Set the name of the pipeline's master job. type: string default: pl:chrom-seek When submitting the pipeline to a job scheduler, like SLURM, this option always you to set the name of the pipeline's master job. By default, the name of the pipeline's master job is set to \"pl:chrom-seek\". Example: --job-name pl_id-42 --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The chrom-seek cache subcommand can be used to create a local SIF cache. Please see chrom-seek cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running chrom-seek with this option when ever possible. Example: --sif-cache /data/$USER/SIFs --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12 --tmp-dir TMP_DIR Max number of threads for each process. type: path default: /lscratch/$SLURM_JOB_ID Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOB_ID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Example: --tmp-dir /scratch/$USER/ 2.4 Miscellaneous options \u00b6 Each of the following arguments are optional, and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help 3. Example usage on Biowulf \u00b6 # Step 1.) Grab an interactive node, # do not run on head node! sinteractive -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Step 2A.) Dry-run the pipeline ./chrom-seek run --assay ChIP \\ --genome hg19 \\ --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /output \\ --peakcall .tests/peakcall.tsv \\ --sif-cache /data/OpenOmics/SIFs/ \\ --mode slurm \\ --dry-run # Step 2B.) Run the chrom-seek pipeline # The slurm mode will submit jobs to # the cluster. It is recommended running # the pipeline in this mode. ./chrom-seek run --assay ChIP \\ --genome hg19 \\ --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /output \\ --peakcall .tests/peakcall.tsv \\ --sif-cache /data/OpenOmics/SIFs/ \\ --mode slurm","title":"chrom-seek run"},{"location":"usage/run/#chrom-seek-run","text":"","title":"chrom-seek run"},{"location":"usage/run/#1-about","text":"The chrom-seek executable is composed of several inter-related sub commands. Please see chrom-seek -h for all available options. This part of the documentation describes options and concepts for chrom-seek run sub command in more detail. With minimal configuration, the run sub command enables you to start running chrom-seek with one of its available data-processing pipelines. Setting up the chrom-seek pipeline is fast and easy! In its most basic form, chrom-seek run only has five required inputs . To run an available pipeline with your data raw data, please provide a space seperated list of FastQ (globbing is supported), an output directory to store results, a reference genome for alignment and annotation, an assay type to invoke a specific data-processing pipeline, and a peak call file to set sample metadata.","title":"1. About"},{"location":"usage/run/#2-synopsis","text":"$ chrom-seek run [--help] \\ [--mode {slurm,local}] [--job-name JOB_NAME] [--batch-id BATCH_ID] \\ [--tmp-dir TMP_DIR] [--silent] [--sif-cache SIF_CACHE] \\ [--singularity-cache SINGULARITY_CACHE] \\ [--dry-run] [--threads THREADS] \\ [--contrasts CONTRASTS] \\ --assay {cfChIP,ChIP,ATAC,cutnrun} \\ --genome GENOME \\ --input INPUT [INPUT ...] \\ --output OUTPUT \\ --peakcall PEAKCALL The synopsis for each command shows its arguments and their usage. Optional arguments are shown in square brackets. A user must provide a list of FastQ (globbing is supported) to analyze via --input argument and an output directory to store results via --output argument, define an assay type to select an appropriate data-processing pipeline via --assay argument, select a reference genome to be used for alignment and annotation via --genome argument, and a peakcall file to define groups/inputs/blocking factors for each sample. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/run/#21-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --assay {cfChIP,ChIP,ATAC,cutnrun} Assay type or data-processing pipeline. type: string This option defines which pipeline will be run. chrom-seek supports the processing of bulk ChIP-seq (ChIP), cell-free DNA ChIP-seq (cfChIP), ATAC-seq (ATAC) samples, and CUT & RUN or CUT & TAG (cutnrun). Please select from one of the following data-processing pipelines: cfChIP , ChIP , ATAC , cutnrun . Example: --assay ChIP --genome {hg19,hg38,mm10,mm39} Reference genome. type: string This option defines the reference genome of the samples for alignment and annotation. There are prebuilt reference files for human (hg19 and hg38), mouse (mm10 and mm39), and rhesus data. Please select one of the following options: hg19 , hg38 , mm10 , mm39 , rheMac10 . Example: --genome hg19 --input INPUT [INPUT ...] Input FastQ. type: file(s) One or more FastQ files can be provided. From the command-line, each input file should seperated by a space. Globbing is supported! This makes selecting FastQ files easy. FastQ files should always be gzipp-ed. Only list files you want processed as all files in the list will be run through the initial pipeline steps. All file merging must be done before running the pipeline. Example: --input .tests/*.R?.fastq.gz --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /data/$USER/chrom-seek_out --peakcall PEAKCALL Peakcall file. type: file This tab delimited (TSV) file is used to pair each ChIP sample to its corresponding input sample and to assign any groups that are associated with said sample. Please note that multiple groups can be assigned to a given sample using a comma. Group information is used to setup comparsions within groups of samples. This file consists of three columns containing the name of each ChIP sample, the name of each Input (control) sample, and the name of its groups. Each sample must be assigned to at least one group. The header of this file needs to be Sample for the chips column, InputControl for the inputs column, and Group for the groups column (the column names are case insensitive; lower- upper- camelcase all work the same) . Group names currently cannot include \".\", \"-\", or \"_\". The base name of each sample should be listed in the Sample and InputControl columns. The base name of a given sample can be determined by removing its file extension from the sample's R1 FastQ file, example: WT_S4.R1.fastq.gz becomes WT_S4 in the peakcall file. WT_S4_R1_001.fastq.gz also becomes WT_S4 . An optional column, called Block, can also be provided to block duplicate correlations between repeated observations. Typically, blocks are biological replicates or multiple samples from same indivdual. Contents of example peakcalls file: Sample InputControl Group WT_S1 IN_S1 G1,G3 WT_S2 IN_S2 G1,G3 WT_S3 IN_S3 G1 WT_S4 IN_S4 G2,G4 WT_S5 IN_S5 G2,G4 WT_S6 IN_S6 G2 Example: --peakcall /data/$USER/peakcall.tsv","title":"2.1 Required arguments"},{"location":"usage/run/#22-analysis-options","text":"Each of the following arguments are optional, and do not need to be provided.","title":"2.2 Analysis options"},{"location":"usage/run/#221-differential-bindingaccessibility","text":"--contrasts CONTRASTS Contrasts file. type: file This tab delimited (TSV) file is used to setup comparisons within different groups of samples. Please see the --peakcall option above for more information about how to define groups within a set of samples. This file consists of two columns containing the names of two groups to compare. The names defined in this file must also exist in the peakcall file. Please note: the ordering of groups is preserved when creating contrasts. This is important because it dicates how to interpret the direction of the fold-change for your comparison. In the example below, the first comparison can be interpreted as G2 vs. G1 . This would result in the following contrast: G2-G1 . Within the context of differential binding analysis, a positive fold-change would indicate that the G2 group has higher levels of binding (cfChIP/ChIP) or accessibility (ATAC) at X region. Contents of example contrasts file: G2 G1 G4 G1 G4 G3 Example: --contrasts /data/$USER/contrasts.tsv","title":"2.2.1 Differential Binding/Accessibility"},{"location":"usage/run/#23-orchestration-options","text":"Each of the following arguments are optional, and do not need to be provided. --dry-run Dry run the pipeline. type: boolean flag Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run --silent Silence standard output. type: boolean flag Reduces the amount of information directed to standard output when submitting master job to the job scheduler. Only the job id of the master job is returned. Example: --silent --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. slurm The slurm execution method will submit jobs to the SLURM workload manager . It is recommended running chrom-seek in this mode as execution will be significantly faster in a distributed environment. This is the default mode of execution. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. Example: --mode slurm --job-name JOB_NAME Set the name of the pipeline's master job. type: string default: pl:chrom-seek When submitting the pipeline to a job scheduler, like SLURM, this option always you to set the name of the pipeline's master job. By default, the name of the pipeline's master job is set to \"pl:chrom-seek\". Example: --job-name pl_id-42 --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The chrom-seek cache subcommand can be used to create a local SIF cache. Please see chrom-seek cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running chrom-seek with this option when ever possible. Example: --sif-cache /data/$USER/SIFs --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12 --tmp-dir TMP_DIR Max number of threads for each process. type: path default: /lscratch/$SLURM_JOB_ID Path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOB_ID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Example: --tmp-dir /scratch/$USER/","title":"2.3 Orchestration options"},{"location":"usage/run/#24-miscellaneous-options","text":"Each of the following arguments are optional, and do not need to be provided. -h, --help Display Help. type: boolean flag Shows command's synopsis, help message, and an example command Example: --help","title":"2.4 Miscellaneous options"},{"location":"usage/run/#3-example-usage-on-biowulf","text":"# Step 1.) Grab an interactive node, # do not run on head node! sinteractive -n 1 --time = 1 :00:00 --mem = 8gb --cpus-per-task = 2 --pty bash module purge module load singularity snakemake # Step 2A.) Dry-run the pipeline ./chrom-seek run --assay ChIP \\ --genome hg19 \\ --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /output \\ --peakcall .tests/peakcall.tsv \\ --sif-cache /data/OpenOmics/SIFs/ \\ --mode slurm \\ --dry-run # Step 2B.) Run the chrom-seek pipeline # The slurm mode will submit jobs to # the cluster. It is recommended running # the pipeline in this mode. ./chrom-seek run --assay ChIP \\ --genome hg19 \\ --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /output \\ --peakcall .tests/peakcall.tsv \\ --sif-cache /data/OpenOmics/SIFs/ \\ --mode slurm","title":"3. Example usage on Biowulf"},{"location":"usage/unlock/","text":"chrom-seek unlock \u00b6 1. About \u00b6 The chrom-seek executable is composed of several inter-related sub commands. Please see chrom-seek -h for all available options. This part of the documentation describes options and concepts for chrom-seek unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking chrom-seek pipeline output directory is fast and easy! In its most basic form, chrom-seek unlock only has one required input . 2. Synopsis \u00b6 $ ./chrom-seek unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 --output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/chrom-seek_out 2.2 Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help 3. Example \u00b6 # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory chrom-seek unlock --output /data/ $USER /output","title":"chrom-seek unlock"},{"location":"usage/unlock/#chrom-seek-unlock","text":"","title":"chrom-seek unlock"},{"location":"usage/unlock/#1-about","text":"The chrom-seek executable is composed of several inter-related sub commands. Please see chrom-seek -h for all available options. This part of the documentation describes options and concepts for chrom-seek unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking chrom-seek pipeline output directory is fast and easy! In its most basic form, chrom-seek unlock only has one required input .","title":"1. About"},{"location":"usage/unlock/#2-synopsis","text":"$ ./chrom-seek unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"usage/unlock/#21-required-arguments","text":"--output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/chrom-seek_out","title":"2.1 Required Arguments"},{"location":"usage/unlock/#22-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help","title":"2.2 Options"},{"location":"usage/unlock/#3-example","text":"# Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory chrom-seek unlock --output /data/ $USER /output","title":"3. Example"}]}